/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/actions": {
    /**
     * List actions
     * @description Lists all available actions in a user context, enriched by `attributes`. Append `?workspaceId` to list actions in a workspace context.
     */
    get: operations["ListActions"];
    /**
     * Create action
     * @description Creates a new pipeline action. Append `?workspaceId` to associate the action with the given workspace.
     */
    post: operations["CreateAction"];
  };
  "/actions/labels/add": {
    /**
     * Add labels to actions
     * @description Adds the given list of labels to the given pipeline actions. Existing labels are preserved.
     */
    post: operations["AddLabelsToActions"];
  };
  "/actions/labels/apply": {
    /**
     * Replace action labels
     * @description Applies the given list of labels to the given pipeline actions. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
     */
    post: operations["ApplyLabelsToActions"];
  };
  "/actions/labels/remove": {
    /**
     * Remove labels from actions
     * @description Removes the given list of labels from the given pipeline actions.
     */
    post: operations["RemoveLabelsFromActions"];
  };
  "/actions/types": {
    /**
     * List action event types
     * @description Lists the supported event types that trigger a pipeline action. Append `?workspaceId` to list event types in a workspace context.
     */
    get: operations["ListActionTypes"];
  };
  "/actions/validate": {
    /**
     * Validate action name
     * @description Confirms the validity of the given action name. Append `?name=<your_action_name>`.
     */
    get: operations["ValidateActionName"];
  };
  "/actions/{actionId}": {
    /**
     * Describe action
     * @description Retrieves the details of the pipeline action identified by the given `actionId`.
     */
    get: operations["DescribeAction"];
    /**
     * Update action
     * @description Updates the details of the action identified by the given `actionId`. The `source` of an existing action cannot be changed.
     */
    put: operations["UpdateAction"];
    /**
     * Delete action
     * @description Deletes the pipeline action identified by the given `actionId`.
     */
    delete: operations["DeleteAction"];
  };
  "/actions/{actionId}/launch": {
    /**
     * Trigger Tower Launch action
     * @description Triggers the execution of the Tower Launch action identified by the given `actionId`.
     */
    post: operations["LaunchAction"];
  };
  "/actions/{actionId}/pause": {
    /**
     * Pause or resume action
     * @description Pauses or resumes the pipeline action identified by the given `actionId`.
     */
    post: operations["PauseAction"];
  };
  "/avatars": {
    /** Create the avatar image */
    post: operations["CreateAvatar"];
  };
  "/avatars/{avatarId}": {
    /** Download the avatar image */
    get: operations["DownloadAvatar"];
  };
  "/compute-envs": {
    /**
     * List compute environments
     * @description Lists all available Tower compute environments in a user context. Append `?workspaceId` to list compute environments in a workspace context, and `?status` to filter by compute environment status.
     */
    get: operations["ListComputeEnvs"];
    /**
     * Create compute environment
     * @description Creates a new Tower compute environment. Append `?workspaceId` to create the environment in a workspace context.
     */
    post: operations["CreateComputeEnv"];
  };
  "/compute-envs/validate": {
    /**
     * Validate compute environment name
     * @description Confirms the validity of the given compute environment name in a user context. Append `?name=<your_ce_name>`.
     */
    get: operations["ValidateComputeEnvName"];
  };
  "/compute-envs/{computeEnvId}": {
    /**
     * Describe compute environment
     * @description Retrieves the details of the Tower compute environment identified by the given `computeEnvId`.
     */
    get: operations["DescribeComputeEnv"];
    /**
     * Update compute environment
     * @description Updates the details of the compute environment identified by the given `computeEnvId`.
     */
    put: operations["UpdateComputeEnv"];
    /**
     * Delete compute environment
     * @description Deletes the Tower compute environment identified by the given `computeEnvId`.
     */
    delete: operations["DeleteComputeEnv"];
  };
  "/compute-envs/{computeEnvId}/primary": {
    /**
     * Define primary compute environment
     * @description Selects the compute environment identified by the given `computeEnvId` as the primary compute environment in the given workspace context.
     */
    post: operations["UpdateComputeEnvPrimary"];
  };
  "/credentials": {
    /**
     * List credentials
     * @description Lists all available Tower credentials in a user context. Append `?workspaceId` to list credentials in a workspace context, and `?platformId` to filter credentials by computing platform.
     */
    get: operations["ListCredentials"];
    /**
     * Create credentials
     * @description Creates new Tower credentials in a user context. Append `?workspaceId` to create the credentials in a workspace context.
     */
    post: operations["CreateCredentials"];
  };
  "/credentials/validate": {
    /**
     * Validate credential name
     * @description Validates the given credentials name. Append `?name=<your_credential_name>`.
     */
    get: operations["ValidateCredentialsName"];
  };
  "/credentials/{credentialsId}": {
    /**
     * Describe credentials
     * @description Retrieves the details of the credentials identified by the given `credentialsId`.
     */
    get: operations["DescribeCredentials"];
    /**
     * Update credentials
     * @description Updates the details of the credentials identified by the given `credentialsId`.
     */
    put: operations["UpdateCredentials"];
    /**
     * Delete credentials
     * @description Deletes the credentials identified by the given `credentialsId`.
     */
    delete: operations["DeleteCredentials"];
  };
  "/datasets": {
    /**
     * List available datasets
     * @description Lists all available datasets in the user context. Append `?workspaceId` to list datasets in a workspace context
     */
    get: operations["ListDatasets"];
    /**
     * Create dataset
     * @description Creates a new Tower dataset in the user context. Include the dataset file and details in your request body. Append `?workspaceId` to create the dataset in a workspace context.
     */
    post: operations["CreateDataset"];
  };
  "/datasets/versions": {
    /**
     * List latest dataset versions
     * @description Lists the latest version of each dataset in the user context. Append `?workspaceId` to list latest versions in a workspace context.
     */
    get: operations["ListWorkspaceDatasetVersions"];
  };
  "/datasets/{datasetId}": {
    /**
     * Update dataset
     * @description Updates the details of the dataset identified by the given `datasetId`.
     */
    put: operations["UpdateDataset"];
    /**
     * Delete dataset
     * @description Deletes the dataset identified by the given `datasetId`.
     */
    delete: operations["DeleteDataset"];
  };
  "/datasets/{datasetId}/metadata": {
    /**
     * Describe dataset
     * @description Retrieves the metadata of the dataset identified by the given `datasetId`.
     */
    get: operations["DescribeDataset"];
  };
  "/datasets/{datasetId}/upload": {
    /**
     * Upload new dataset version
     * @description Uploads the CSV or TSV content to create a new version of the dataset identified by the given `datasetId`.
     */
    post: operations["UploadDataset"];
  };
  "/datasets/{datasetId}/v/{version}/n/{fileName}": {
    /**
     * Download dataset content
     * @description Downloads the content of the dataset identified by the given `datasetId` and `version`.
     */
    get: operations["DownloadDataset"];
  };
  "/datasets/{datasetId}/versions": {
    /**
     * List all dataset versions
     * @description Lists all versions of the given `datasetId`.
     */
    get: operations["ListDatasetVersions"];
  };
  "/ga4gh/wes/v1/runs": {
    /**
     * GA4GH: List runs
     * @description Uses the GA4GH workflow execution service API to list all run records.
     */
    get: operations["GaRunList"];
    /**
     * GA4GH: Launch run
     * @description Uses the GA4GH workflow execution service API to launch a new run. Runs are launched in the user workspace context by default. To launch in an organization workspace context, include the `workspaceId` in `workflow_engine_parameters`. Runs are launched with the workspace primary compute environment by default. To launch with a different compute environment, include the `computeEnvId` in `workflow_engine_parameters`.
     */
    post: operations["GaRunCreate"];
  };
  "/ga4gh/wes/v1/runs/{run_id}": {
    /**
     * GA4GH: Describe run
     * @description Uses the GA4GH workflow execution service API to retrieve the details of the run assoiated with the given `run_id`.
     */
    get: operations["GaRunDescribe"];
  };
  "/ga4gh/wes/v1/runs/{run_id}/cancel": {
    /**
     * GA4GH: Cancel run
     * @description Uses the GA4GH workflow execution service API to cancel the run associated with the given `run_id`.
     */
    post: operations["GaRunCancel"];
  };
  "/ga4gh/wes/v1/runs/{run_id}/status": {
    /**
     * GA4GH: Retrieve run status
     * @description Uses the GA4GH workflow execution service API to retrieve the status of the run associated with the given `run_id`.
     */
    get: operations["GaRunStatus"];
  };
  "/ga4gh/wes/v1/service-info": {
    /** GA4GH workflow execution service API info */
    get: operations["GaServiceInfo"];
  };
  "/labels": {
    /**
     * List labels
     * @description Lists all available labels in a user context. Append `?workspaceId` to list labels in a workspace context.
     */
    get: operations["ListLabels"];
    /**
     * Create label
     * @description Creates a new label or returns an existing label based on name/value. By default the operation works in a user context, append `?workspaceId` to create/retrieve a label in a workspace context. Resource labels include `resource: true` and a `value`.
     */
    post: operations["CreateLabel"];
  };
  "/labels/{labelId}": {
    /**
     * Update label
     * @description Updates the label identified by the given `labelId`.
     */
    put: operations["UpdateLabel"];
    /**
     * Delete label
     * @description Deletes the label identified by the given `labelId`.
     */
    delete: operations["DeleteLabel"];
  };
  "/launch/{launchId}": {
    /**
     * Describe Launch record
     * @description Retrieves the details of the launch identified by the given `launchId`.
     */
    get: operations["DescribeLaunch"];
  };
  "/launch/{launchId}/datasets": {
    /**
     * Describe launch datasets
     * @description Retrieves the details of the datasets used in the launch identified by the given `launchId`.
     */
    get: operations["ListLaunchDatasetVersions"];
  };
  "/orgs": {
    /**
     * List organizations
     * @description Lists all available organizations in a user context.
     */
    get: operations["ListOrganizations"];
    /**
     * Create organization
     * @description Creates a new organization.
     */
    post: operations["CreateOrganization"];
  };
  "/orgs/validate": {
    /**
     * Validate organization name
     * @description Confirms the validity of the given organization name. Append `?name=<your_org_name>`.
     */
    get: operations["ValidateOrganizationName"];
  };
  "/orgs/{orgId}": {
    /**
     * Describe organization
     * @description Retrieves the details of the organization identified by the given `orgId`.
     */
    get: operations["DescribeOrganization"];
    /**
     * Update organization
     * @description Updates the details of the organization identified by the given `orgId`.
     */
    put: operations["UpdateOrganization"];
    /**
     * Delete organization
     * @description Deletes the organization identified by the given `orgId`.
     */
    delete: operations["DeleteOrganization"];
  };
  "/orgs/{orgId}/collaborators": {
    /**
     * List organization collaborators
     * @description Lists the collaborators of the organization identified by the given `orgId`.
     */
    get: operations["ListOrganizationCollaborators"];
  };
  "/orgs/{orgId}/members": {
    /**
     * List organization members
     * @description Lists the members of the organization identified by the given `orgId`.
     */
    get: operations["ListOrganizationMembers"];
  };
  "/orgs/{orgId}/members/add": {
    /**
     * Add organization member
     * @description Adds a new member to the organization identified by the given `orgId`.
     */
    put: operations["CreateOrganizationMember"];
  };
  "/orgs/{orgId}/members/leave": {
    /**
     * Leave organization
     * @description Removes the requesting user from the organization identified by the given `orgId`.
     */
    delete: operations["LeaveOrganization"];
  };
  "/orgs/{orgId}/members/{memberId}": {
    /**
     * Delete member
     * @description Deletes the member identified by the given `memberId`.
     */
    delete: operations["DeleteOrganizationMember"];
  };
  "/orgs/{orgId}/members/{memberId}/role": {
    /**
     * Update member role
     * @description Updates the role of the member identified by the given `memberId`.
     */
    put: operations["UpdateOrganizationMemberRole"];
  };
  "/orgs/{orgId}/teams": {
    /**
     * List organization teams
     * @description Lists all teams in the organization identified by the given `orgId`.
     */
    get: operations["ListOrganizationTeams"];
    /**
     * Create team
     * @description Creates a new team in the organization identified by the given `orgId`.
     */
    post: operations["CreateOrganizationTeam"];
  };
  "/orgs/{orgId}/teams/validate": {
    /**
     * Validate team name
     * @description Confirms the validity of the given team name. Append `?name=<your_team_name>`.
     */
    get: operations["ValidateTeamName"];
  };
  "/orgs/{orgId}/teams/{teamId}": {
    /**
     * Describe team
     * @description Retrieves the details of the team identified by the given `teamId`.
     */
    get: operations["DescribeOrganizationTeam"];
    /**
     * Update team
     * @description Updates the details of the team identified by the given `teamId`.
     */
    put: operations["UpdateOrganizationTeam"];
    /**
     * Delete team
     * @description Deletes the team identified by the given `teamId`.
     */
    delete: operations["DeleteOrganizationTeam"];
  };
  "/orgs/{orgId}/teams/{teamId}/members": {
    /**
     * List team members
     * @description Lists the team members associated with the given `teamId`.
     */
    get: operations["ListOrganizationTeamMembers"];
    /**
     * Create team member
     * @description Adds a new member to the team identified by the given `teamId`.
     */
    post: operations["CreateOrganizationTeamMember"];
  };
  "/orgs/{orgId}/teams/{teamId}/members/{memberId}/delete": {
    /**
     * Delete team member
     * @description Deletes the team member identified by the given `memberId`.
     */
    delete: operations["DeleteOrganizationTeamMember"];
  };
  "/orgs/{orgId}/teams/{teamId}/workspaces": {
    /**
     * List team workspaces
     * @description Lists all the workspaces of which the given `teamId` is a participant.
     */
    get: operations["ListWorkspacesByTeam"];
  };
  "/orgs/{orgId}/workspaces": {
    /**
     * List organization workspaces
     * @description Lists the organization workspaces in `orgId` to which the requesting user belongs.
     */
    get: operations["ListWorkspaces"];
    /**
     * Create workspace
     * @description Creates a new organization workspace.
     */
    post: operations["CreateWorkspace"];
  };
  "/orgs/{orgId}/workspaces/validate": {
    /**
     * Validate workspace name
     * @description Confirms the validity of the given workspace name. Append `?name=<your_workspace_name>`.
     */
    get: operations["WorkspaceValidate"];
  };
  "/orgs/{orgId}/workspaces/{workspaceId}": {
    /**
     * Describe workspace
     * @description Retrieves the details of the workspace identified by the given `workspaceId`.
     */
    get: operations["DescribeWorkspace"];
    /**
     * Update workspace
     * @description Updates the details of the workspace identified by the given `workspaceId`.
     */
    put: operations["UpdateWorkspace"];
    /**
     * Delete workspace
     * @description Deletes the workspace identified by the given `workspaceId`.
     */
    delete: operations["DeleteWorkspace"];
  };
  "/orgs/{orgId}/workspaces/{workspaceId}/participants": {
    /**
     * List workspace participants
     * @description Lists the participants of the workspace identified by the given `workspaceId`.
     */
    get: operations["ListWorkspaceParticipants"];
    /**
     * Leave workspace
     * @description Removes the requesting user from the given workspace.
     */
    delete: operations["LeaveWorkspaceParticipant"];
  };
  "/orgs/{orgId}/workspaces/{workspaceId}/participants/add": {
    /**
     * Create workspace participant
     * @description Adds a new participant to the workspace identified by the given `workspaceId`.
     */
    put: operations["CreateWorkspaceParticipant"];
  };
  "/orgs/{orgId}/workspaces/{workspaceId}/participants/{participantId}": {
    /**
     * Delete workspace participant
     * @description Deletes the given participant from the given workspace.
     */
    delete: operations["DeleteWorkspaceParticipant"];
  };
  "/orgs/{orgId}/workspaces/{workspaceId}/participants/{participantId}/role": {
    /**
     * Update participant role
     * @description Updates the role of the given participant in the given workspace.
     */
    put: operations["UpdateWorkspaceParticipantRole"];
  };
  "/pipeline-secrets": {
    /**
     * List pipeline secrets
     * @description Lists all available pipeline secrets in a user context. Append `?workspaceId` to list secrets in a workspace context.
     */
    get: operations["ListPipelineSecrets"];
    /**
     * Create pipeline secret
     * @description Creates a new pipeline secret in the user context. Append `?workspaceId` to create the secret in a workspace context.
     */
    post: operations["CreatePipelineSecret"];
  };
  "/pipeline-secrets/validate": {
    /**
     * Validate secret name
     * @description Confirms the validity of the given pipeline secret name in a user context. Append `?name=<your_secret_name>`. Append `?workspaceId` to validate the name in a workspace context.
     */
    get: operations["ValidatePipelineSecretName"];
  };
  "/pipeline-secrets/{secretId}": {
    /**
     * Describe pipeline secret
     * @description Retrieves the details of the pipeline secret identified by the given `secretId`.
     */
    get: operations["DescribePipelineSecret"];
    /**
     * Update secret
     * @description Updates the pipeline secret identified by the given `secretId`.
     */
    put: operations["UpdatePipelineSecret"];
    /**
     * Delete secret
     * @description Deletes the pipeline secret identified by the given `secretId`.
     */
    delete: operations["DeletePipelineSecret"];
  };
  "/pipelines": {
    /**
     * List pipelines
     * @description Lists all available pipelines in a user context, enriched by `attributes`. Append `workspaceId` to list pipelines in a workspace context.
     */
    get: operations["ListPipelines"];
    /**
     * Create pipeline
     * @description Creates a new pipeline in a user context. Append `?workspaceId` to create the pipeline in a workspace context.
     */
    post: operations["CreatePipeline"];
  };
  "/pipelines/info": {
    /**
     * Describe remote pipeline repository
     * @description Retrieves the details of a remote Nextflow pipeline Git repository. Append the repository name or full URL with `?name`.
     */
    get: operations["DescribePipelineRepository"];
  };
  "/pipelines/labels/add": {
    /**
     * Add labels to pipelines
     * @description Adds the given list of labels to the given pipelines. Existing labels are preserved.
     */
    post: operations["AddLabelsToPipelines"];
  };
  "/pipelines/labels/apply": {
    /**
     * Replace pipeline labels
     * @description Applies the given list of labels to the given pipelines. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
     */
    post: operations["ApplyLabelsToPipelines"];
  };
  "/pipelines/labels/remove": {
    /**
     * Remove labels from pipelines
     * @description Removes the given list of labels from the given pipelines.
     */
    post: operations["RemoveLabelsFromPipelines"];
  };
  "/pipelines/repositories": {
    /**
     * List user pipeline repositories
     * @description Lists known Nextflow pipeline Git repositories, extracted from existing runs. Append `?workspaceId` to list repositories in a workspace context.
     */
    get: operations["ListPipelineRepositories"];
  };
  "/pipelines/validate": {
    /**
     * Validate pipeline name
     * @description Confirms the validity of the given pipeline `name` in a user context. Append `?name=<your_pipeline_name>`. Append `?workspaceId` to validate the name in a workspace context.
     */
    get: operations["ValidatePipelineName"];
  };
  "/pipelines/{pipelineId}": {
    /**
     * Describe pipeline
     * @description Retrieves the details of the pipeline identified by the given `pipelineId`, enriched by `attributes`.
     */
    get: operations["DescribePipeline"];
    /**
     * Update pipeline
     * @description Updates the details of the pipeline identified by the given `pipelineId`.
     *             **Note**: If `labelIds` is `null`, empty, or ommitted, existing pipeline labels are removed.
     *             Include `labelIds: [<label-id-1>,<label-id-2>]` to override existing labels. Labels to be preserved must be included.
     *             To append a list of labels to multiple pipelines, use `/pipelines/labels/add`.
     */
    put: operations["UpdatePipeline"];
    /**
     * Delete pipeline
     * @description Deletes the pipeline identified by the given `pipelineId`.
     */
    delete: operations["DeletePipeline"];
  };
  "/pipelines/{pipelineId}/launch": {
    /**
     * Describe pipeline launch
     * @description Retrieves the launch details of the pipeline identified by the given `pipelineId`.
     */
    get: operations["DescribePipelineLaunch"];
  };
  "/pipelines/{pipelineId}/schema": {
    /**
     * Describe pipeline schema
     * @description Retrieves the pipeline schema of the pipeline identified by the given `pipelineId`, enriched by `attributes`.
     */
    get: operations["DescribePipelineSchema"];
  };
  "/platforms": {
    /**
     * List platforms
     * @description Lists all available computing platforms in a user context. Append `?workspaceId` to list platforms in a workspace context.
     */
    get: operations["ListPlatforms"];
  };
  "/platforms/{platformId}": {
    /**
     * Describe platform
     * @description Retrieves the details of the computing platform identified by the given `platformId`.
     */
    get: operations["DescribePlatform"];
  };
  "/platforms/{platformId}/regions": {
    /**
     * List platform regions
     * @description Lists the available regions for the computing platform identified by the given `platformId`.
     */
    get: operations["ListPlatformRegions"];
  };
  "/service-info": {
    /** General Tower service features and version */
    get: operations["Info"];
  };
  "/tokens": {
    /** List all available API tokens */
    get: operations["TokenList"];
    /** Create an API token */
    post: operations["CreateToken"];
  };
  "/tokens/delete-all": {
    /** Delete all user API tokens */
    delete: operations["DeleteAllTokens"];
  };
  "/tokens/{tokenId}": {
    /** Delete an API token */
    delete: operations["DeleteToken"];
  };
  "/trace/create": {
    /** Create a new Workflow execution trace */
    post: operations["CreateTrace"];
  };
  "/trace/{workflowId}/begin": {
    /** Signal the Workflow execution has started */
    put: operations["UpdateTraceBegin"];
  };
  "/trace/{workflowId}/complete": {
    /** Signal the Workflow execution has completed */
    put: operations["UpdateTraceComplete"];
  };
  "/trace/{workflowId}/heartbeat": {
    /** Period request to signal the execution is still on-going */
    put: operations["UpdateTraceHeartbeat"];
  };
  "/trace/{workflowId}/progress": {
    /** Store one or more task executions metadata for the specified Workflow */
    put: operations["UpdateTraceProgress"];
  };
  "/user-info": {
    /** Describe current user */
    get: operations["UserInfo"];
  };
  "/user/{userId}/workspaces": {
    /**
     * List user workspaces and organizations
     * @description Lists the workspaces and organizations to which the user identified by the given `userId` belongs.
     */
    get: operations["ListWorkspacesUser"];
  };
  "/users/validate": {
    /** Check that the user name is valid */
    get: operations["ValidateUserName"];
  };
  "/users/{userId}": {
    /** Describe a user entity */
    get: operations["DescribeUser"];
    /** Update an user entity */
    post: operations["UpdateUser"];
    /** Delete a user entity */
    delete: operations["DeleteUser"];
  };
  "/workflow": {
    /**
     * List workflows
     * @description Lists all workflow records, enriched with `attributes`. Append `?workspaceId` to list workflow records in a workspace context.
     */
    get: operations["ListWorkflows"];
  };
  "/workflow/delete": {
    /**
     * Delete workflows
     * @description Deletes the workflow records identified by the given list of `workflowIds`.
     */
    post: operations["DeleteWorkflowMany"];
  };
  "/workflow/labels/add": {
    /**
     * Add labels to workflows
     * @description Adds the given list of labels to the given workflows. Existing labels are preserved.
     */
    post: operations["AddLabelsToWorkflows"];
  };
  "/workflow/labels/apply": {
    /**
     * Replace workflow labels
     * @description Applies the given list of labels to the given workflows. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
     */
    post: operations["ApplyLabelsToWorkflows"];
  };
  "/workflow/labels/remove": {
    /**
     * Remove labels from workflows
     * @description Removes the given list of labels from the given workflows.
     */
    post: operations["RemoveLabelsFromWorkflows"];
  };
  "/workflow/launch": {
    /**
     * Launch workflow
     * @description Submits a workflow execution.
     */
    post: operations["CreateWorkflowLaunch"];
  };
  "/workflow/random-name": {
    /** Generates a random name */
    get: operations["GenerateRandomWorkflowName"];
  };
  "/workflow/validate": {
    /** Check that the given run name of a workflow has a valid format. When the session ID is given: check that no other workflow in the system exists with the combination of both elements */
    get: operations["ValidateWorkflowConstraints"];
  };
  "/workflow/{workflowId}": {
    /**
     * Describe workflow
     * @description Retrieves the details of the workflow record associated with the given `workflowId`.
     */
    get: operations["DescribeWorkflow"];
    /** Delete the Workflow entity with the given ID */
    delete: operations["DeleteWorkflow"];
  };
  "/workflow/{workflowId}/cancel": {
    /**
     * Cancel workflow
     * @description Cancels the workflow execution identified by the given `workflowId`.
     */
    post: operations["CancelWorkflow"];
  };
  "/workflow/{workflowId}/download": {
    /**
     * Download workflow files
     * @description Downloads the workflow files for the Nextflow main job associated with the given `workflowId`.
     */
    get: operations["DownloadWorkflowLog"];
  };
  "/workflow/{workflowId}/download/{taskId}": {
    /**
     * Download workflow task files
     * @description Downloads the workflow files of the task identified by the given `taskId`.
     */
    get: operations["DownloadWorkflowTaskLog"];
  };
  "/workflow/{workflowId}/launch": {
    /**
     * Describe workflow launch
     * @description Retrieves the details of the workflow launch associated with the given `workflowId`.
     */
    get: operations["DescribeWorkflowLaunch"];
  };
  "/workflow/{workflowId}/log": {
    /**
     * Get workflow logs
     * @description Retrieves the output logs for the Nextflow main job of the workflow identified by the given `workflowId`.
     */
    get: operations["WorkflowLogs"];
  };
  "/workflow/{workflowId}/log/{taskId}": {
    /**
     * Get workflow task logs
     * @description Retrieves the output logs for the workflow task identified by the given `taskId`.
     */
    get: operations["GetWorkflowTaskLog"];
  };
  "/workflow/{workflowId}/metrics": {
    /** Get the execution metrics for the given Workflow ID */
    get: operations["DescribeWorkflowMetrics"];
  };
  "/workflow/{workflowId}/progress": {
    /** Retrieve the execution progress for the given Workflow ID */
    get: operations["DescribeWorkflowProgress"];
  };
  "/workflow/{workflowId}/star": {
    /**
     * Check workflow star status
     * @description Confirms whether the given `workflowId` is starred.
     */
    get: operations["DescribeWorkflowStar"];
    /**
     * Star workflow
     * @description Adds the workflow identified by the given `workflowId` to your list of starred workflows.
     */
    post: operations["CreateWorkflowStar"];
    /**
     * Unstar workflow
     * @description Removes the workflow identified by the given `workflowId` from your list of starred workflows.
     */
    delete: operations["DeleteWorkflowStar"];
  };
  "/workflow/{workflowId}/task/{taskId}": {
    /** Describe a task entity with the given ID */
    get: operations["DescribeWorkflowTask"];
  };
  "/workflow/{workflowId}/tasks": {
    /** List the tasks for the given Workflow ID and filter parameters */
    get: operations["ListWorkflowTasks"];
  };
  "/workspaces/{workspaceId}/datasets": {
    /**
     * List available datasets
     * @deprecated
     * @description Lists all available datasets in the workspace context identified by the given `workspaceId`.
     */
    get: operations["ListDatasets_1"];
    /**
     * Create dataset
     * @deprecated
     * @description Creates a new Tower dataset in the given workspace context. Include the dataset file and details in your request body.
     */
    post: operations["CreateDataset_1"];
  };
  "/workspaces/{workspaceId}/datasets/versions": {
    /**
     * List latest dataset versions
     * @deprecated
     * @description Lists the latest version of each dataset associated with the given `workspaceId`.
     */
    get: operations["ListWorkspaceDatasetVersions_1"];
  };
  "/workspaces/{workspaceId}/datasets/{datasetId}": {
    /**
     * Update dataset
     * @deprecated
     * @description Updates the details of the dataset identified by the given `datasetId`.
     */
    put: operations["UpdateDataset_1"];
    /**
     * Delete dataset
     * @deprecated
     * @description Deletes the dataset identified by the given `datasetId`.
     */
    delete: operations["DeleteDataset_1"];
  };
  "/workspaces/{workspaceId}/datasets/{datasetId}/metadata": {
    /**
     * Describe dataset
     * @deprecated
     * @description Retrieves the metadata of the dataset identified by the given `datasetId`.
     */
    get: operations["DescribeDataset_1"];
  };
  "/workspaces/{workspaceId}/datasets/{datasetId}/upload": {
    /**
     * Upload new dataset version
     * @deprecated
     * @description Uploads the CSV or TSV content to create a new version of the dataset identified by the given `datasetId`.
     */
    post: operations["UploadDataset_1"];
  };
  "/workspaces/{workspaceId}/datasets/{datasetId}/v/{version}/n/{fileName}": {
    /**
     * Download dataset content
     * @description Downloads the content of the dataset identified by the given `datasetId` and `version`.
     */
    get: operations["DownloadDataset_1"];
  };
  "/workspaces/{workspaceId}/datasets/{datasetId}/versions": {
    /**
     * List all dataset versions
     * @deprecated
     * @description Lists all versions of the given `datasetId`.
     */
    get: operations["ListDatasetVersions_1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AbstractGridConfig: {
      workDir?: string;
      launchDir?: string;
      userName?: string;
      hostName?: string;
      /** Format: int32 */
      port?: number;
      headQueue?: string;
      computeQueue?: string;
      /** Format: int32 */
      maxQueueSize?: number;
      headJobOptions?: string;
      propagateHeadJobOptions?: boolean;
      preRunScript?: string;
      postRunScript?: string;
    };
    AccessToken: {
      /** @deprecated */
      basicAuth?: string;
      /** Format: int64 */
      id?: number | null;
      name: string;
      /** Format: date-time */
      lastUsed?: string;
      /** Format: date-time */
      dateCreated?: string;
    };
    "Action.ConfigType": {
      discriminator?: string;
    } & (components["schemas"]["Action.TowerActionConfig"] | components["schemas"]["GithubActionConfig"]);
    "Action.EventType": {
      discriminator?: string;
      /** Format: date-time */
      timestamp?: string;
    } & (components["schemas"]["GithubActionEvent"] | components["schemas"]["Action.TowerActionEvent"]);
    /** @enum {string} */
    "Action.Source": "github" | "tower";
    /** @enum {string} */
    "Action.Status": "CREATING" | "ACTIVE" | "ERROR" | "PAUSED";
    "Action.TowerActionConfig": {
      discriminator?: string;
    };
    "Action.TowerActionEvent": {
      /** Format: date-time */
      timestamp?: string;
      workflowId?: string;
      discriminator?: string;
    };
    /** @enum {string} */
    ActionQueryAttribute: "labels";
    ActionResponseDto: {
      id?: string;
      launch?: components["schemas"]["Launch"];
      name?: string;
      hookId?: string;
      hookUrl?: string;
      message?: string;
      source?: components["schemas"]["Action.Source"];
      status?: components["schemas"]["Action.Status"];
      config?: components["schemas"]["Action.ConfigType"];
      event?: components["schemas"]["Action.EventType"];
      /** Format: date-time */
      lastSeen?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
      labels?: components["schemas"]["LabelDbDto"][];
    };
    AddMemberRequest: {
      user?: string;
    };
    AddMemberResponse: {
      member?: components["schemas"]["MemberDbDto"];
    };
    AddParticipantRequest: {
      /** Format: int64 */
      teamId?: number;
      userNameOrEmail?: string;
      /** Format: int64 */
      memberId?: number;
    };
    AddParticipantResponse: {
      participant?: components["schemas"]["ParticipantDbDto"];
    };
    AddTeamMemberResponse: {
      member?: components["schemas"]["MemberDbDto"];
    };
    AgentSecurityKeys: {
      connectionId?: string;
      workDir?: string;
      shared?: boolean;
      discriminator?: string;
    };
    /** Altair PBS configuration */
    AltairPbsComputeConfig: components["schemas"]["AbstractGridConfig"] & {
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    Analytics: {
      url?: string;
      /** Format: int32 */
      siteId?: number;
    };
    AssociateActionLabelsRequest: {
      actionIds?: string[];
      labelIds?: number[];
    };
    AssociatePipelineLabelsRequest: {
      pipelineIds?: number[];
      labelIds?: number[];
    };
    AssociateWorkflowLabelsRequest: {
      workflowIds?: string[];
      labelIds?: number[];
    };
    Avatar: {
      id?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    /** AWS Batch configuration */
    AwsBatchConfig: {
      region?: string;
      computeQueue?: string;
      dragenQueue?: string;
      dragenInstanceType?: string;
      computeJobRole?: string;
      executionRole?: string;
      headQueue?: string;
      headJobRole?: string;
      cliPath?: string;
      volumes?: string[];
      workDir?: string;
      preRunScript?: string;
      postRunScript?: string;
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      waveEnabled?: boolean;
      fusion2Enabled?: boolean;
      nvnmeStorageEnabled?: boolean;
      logGroup?: string;
      forge?: components["schemas"]["ForgeConfig"];
      forgedResources?: {
          [key: string]: unknown;
        }[];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    AwsBatchPlatformMetainfo: {
      warnings?: string[];
      jobQueues?: components["schemas"]["AwsBatchPlatformMetainfo.JobQueue"][];
      buckets?: components["schemas"]["AwsBatchPlatformMetainfo.Bucket"][];
      fileSystems?: components["schemas"]["AwsBatchPlatformMetainfo.FsxFileSystem"][];
      efsFileSystems?: components["schemas"]["AwsBatchPlatformMetainfo.EfsFileSystem"][];
      keyPairs?: string[];
      vpcs?: components["schemas"]["AwsBatchPlatformMetainfo.Vpc"][];
      images?: components["schemas"]["AwsBatchPlatformMetainfo.Image"][];
      securityGroups?: components["schemas"]["AwsBatchPlatformMetainfo.SecurityGroup"][];
      subnets?: components["schemas"]["AwsBatchPlatformMetainfo.Subnet"][];
      instanceFamilies?: string[];
      allocStrategy?: string[];
    };
    "AwsBatchPlatformMetainfo.Bucket": {
      path?: string;
    };
    "AwsBatchPlatformMetainfo.EfsFileSystem": {
      id?: string;
    };
    "AwsBatchPlatformMetainfo.FsxFileSystem": {
      id?: string;
      dns?: string;
      mount?: string;
    };
    "AwsBatchPlatformMetainfo.Image": {
      id?: string;
      name?: string;
      description?: string;
    };
    "AwsBatchPlatformMetainfo.JobQueue": {
      name: string;
      state: string;
    };
    "AwsBatchPlatformMetainfo.SecurityGroup": {
      id?: string;
      name?: string;
      vpcId?: string;
    };
    "AwsBatchPlatformMetainfo.Subnet": {
      id?: string;
      zone?: string;
      vpcId?: string;
    };
    "AwsBatchPlatformMetainfo.Vpc": {
      id?: string;
      isDefault?: boolean;
    };
    AwsSecurityKeys: {
      accessKey?: string;
      secretKey?: string;
      assumeRoleArn?: string;
      discriminator?: string;
    };
    /** Azure batch configuration */
    AzBatchConfig: {
      workDir?: string;
      preRunScript?: string;
      postRunScript?: string;
      region?: string;
      headPool?: string;
      /** @deprecated */
      autoPoolMode?: boolean;
      forge?: components["schemas"]["AzBatchForgeConfig"];
      tokenDuration?: string;
      deleteJobsOnCompletion?: components["schemas"]["JobCleanupPolicy"];
      deletePoolsOnCompletion?: boolean;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      waveEnabled?: boolean;
      fusion2Enabled?: boolean;
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    AzBatchForgeConfig: {
      vmType?: string;
      /** Format: int32 */
      vmCount?: number;
      autoScale?: boolean;
      disposeOnDeletion?: boolean;
      containerRegIds?: string[];
    };
    AzureReposSecurityKeys: {
      username?: string;
      password?: string;
      discriminator?: string;
    };
    AzureSecurityKeys: {
      batchName?: string;
      batchKey?: string;
      storageName?: string;
      storageKey?: string;
      discriminator?: string;
    };
    BitBucketSecurityKeys: {
      username?: string;
      password?: string;
      discriminator?: string;
    };
    /** @enum {string} */
    CloudPriceModel: "standard" | "spot";
    CodeCommitSecurityKeys: {
      username?: string;
      password?: string;
      discriminator?: string;
    };
    ComputeConfig: {
      workDir?: string;
      preRunScript?: string;
      postRunScript?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    } & (components["schemas"]["AwsBatchConfig"] | components["schemas"]["GoogleLifeSciencesConfig"] | components["schemas"]["GoogleBatchConfig"] | components["schemas"]["AzBatchConfig"] | components["schemas"]["LsfComputeConfig"] | components["schemas"]["SlurmComputeConfig"] | components["schemas"]["K8sComputeConfig"] | components["schemas"]["EksComputeConfig"] | components["schemas"]["GkeComputeConfig"] | components["schemas"]["UnivaComputeConfig"] | components["schemas"]["AltairPbsComputeConfig"] | components["schemas"]["MoabComputeConfig"]);
    ComputeEnv: {
      id?: string;
      name: string;
      description?: string;
      /** @enum {string} */
      platform: "aws-batch" | "google-lifesciences" | "google-batch" | "azure-batch" | "k8s-platform" | "eks-platform" | "gke-platform" | "uge-platform" | "slurm-platform" | "lsf-platform" | "altair-platform" | "moab-platform" | "local-platform";
      config: components["schemas"]["ComputeConfig"];
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      lastUsed?: string;
      deleted?: boolean;
      status?: components["schemas"]["ComputeEnv.Status"] & string;
      message?: string;
      primary?: boolean;
      credentialsId?: string;
      /** Format: int64 */
      orgId?: number;
      /** Format: int64 */
      workspaceId?: number;
    };
    /** @enum {string} */
    readonly "ComputeEnv.Status": "CREATING" | "AVAILABLE" | "ERRORED" | "INVALID";
    ComputeEnvDbDto: {
      id?: string;
      name?: string;
      platform?: string;
      region?: string;
    };
    /** @enum {string} */
    ComputeEnvQueryAttribute: "labels";
    ComputeEnvResponseDto: {
      id?: string;
      name?: string;
      description?: string;
      /** @enum {string} */
      platform?: "aws-batch" | "google-lifesciences" | "google-batch" | "azure-batch" | "k8s-platform" | "eks-platform" | "gke-platform" | "uge-platform" | "slurm-platform" | "lsf-platform" | "altair-platform";
      config?: components["schemas"]["ComputeConfig"];
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: date-time */
      lastUsed?: string;
      deleted?: boolean;
      status?: components["schemas"]["ComputeEnv.Status"];
      message?: string;
      primary?: boolean;
      credentialsId?: string;
      /** Format: int64 */
      orgId?: number;
      /** Format: int64 */
      workspaceId?: number;
      labels?: components["schemas"]["LabelDbDto"][];
    };
    ComputePlatform: {
      id?: string;
      name?: string;
      credentialsProviders?: string[];
    };
    ComputePlatformDto: {
      id?: string;
      name?: string;
    };
    ComputeRegion: {
      id?: string;
      name?: string;
    };
    ConfigEnvVariable: {
      name?: string;
      value?: string;
      head?: boolean;
      compute?: boolean;
    };
    ConflictException: Record<string, never>;
    ContainerRegistryKeys: {
      userName?: string;
      password?: string;
      registry?: string;
      discriminator?: string;
    };
    CreateAccessTokenRequest: {
      name?: string;
    };
    CreateAccessTokenResponse: {
      accessKey?: string;
      token?: components["schemas"]["AccessToken"];
    };
    CreateActionRequest: {
      name?: string;
      source?: components["schemas"]["Action.Source"];
      launch?: components["schemas"]["WorkflowLaunchRequest"];
    };
    CreateActionResponse: {
      actionId?: string;
    };
    CreateAvatarResponse: {
      avatar?: components["schemas"]["Avatar"];
      url?: string;
    };
    CreateComputeEnvRequest: {
      computeEnv?: components["schemas"]["ComputeEnv"];
      labelIds?: number[];
    };
    CreateComputeEnvResponse: {
      computeEnvId?: string;
    };
    CreateCredentialsRequest: {
      credentials?: components["schemas"]["Credentials"];
    };
    CreateCredentialsResponse: {
      credentialsId?: string;
    };
    CreateDatasetRequest: {
      name?: string;
      description?: string;
    };
    CreateDatasetResponse: {
      dataset?: components["schemas"]["Dataset"];
    };
    CreateLabelRequest: {
      name?: string;
      value?: string;
      resource?: boolean;
      isDefault?: boolean;
    };
    CreateLabelResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      value?: string;
      resource?: boolean;
      isDefault?: boolean;
    };
    CreateOrganizationRequest: {
      organization?: components["schemas"]["Organization"];
      logoId?: string;
    };
    CreateOrganizationResponse: {
      organization?: components["schemas"]["OrganizationDbDto"];
    };
    CreatePipelineRequest: {
      name?: string;
      description?: string;
      icon?: string;
      launch?: components["schemas"]["WorkflowLaunchRequest"];
      labelIds?: number[];
    };
    CreatePipelineResponse: {
      pipeline?: components["schemas"]["PipelineDbDto"];
    };
    CreatePipelineSecretRequest: {
      name?: string;
      value?: string;
    };
    CreatePipelineSecretResponse: {
      /** Format: int64 */
      secretId?: number;
    };
    CreateTeamMemberRequest: {
      userNameOrEmail?: string;
    };
    CreateTeamRequest: {
      team?: components["schemas"]["Team"];
      avatarId?: string;
    };
    CreateTeamResponse: {
      team?: components["schemas"]["TeamDbDto"];
    };
    CreateWorkflowStarResponse: {
      workflowId?: string;
    };
    CreateWorkspaceRequest: {
      workspace?: components["schemas"]["Workspace"];
    };
    CreateWorkspaceResponse: {
      workspace?: components["schemas"]["Workspace"];
    };
    Credentials: {
      id?: string;
      name: string;
      description?: string;
      /** @enum {string} */
      provider: "aws" | "azure" | "google" | "github" | "gitlab" | "bitbucket" | "ssh" | "k8s" | "container-reg" | "tw-agent" | "codecommit" | "gitea" | "azurerepos";
      baseUrl?: string;
      category?: string;
      deleted?: boolean;
      /** Format: date-time */
      lastUsed?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
      keys?: components["schemas"]["SecurityKeys"];
    };
    Dataset: {
      id?: string;
      name: string;
      description?: string;
      mediaType?: string;
      deleted?: boolean;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    DatasetVersionDbDto: {
      datasetId?: string;
      datasetName?: string;
      datasetDescription?: string;
      hasHeader?: boolean;
      /** Format: int64 */
      version?: number;
      /** Format: date-time */
      lastUpdated?: string;
      fileName?: string;
      mediaType?: string;
      url?: string;
    };
    DeleteCredentialsConflictException: components["schemas"]["ConflictException"] & {
      credentialsId: string;
      conflicts: components["schemas"]["DeleteCredentialsConflictException.Conflict"][];
    };
    "DeleteCredentialsConflictException.Conflict": {
      type?: string;
      id?: string;
      name?: string;
      url?: string;
    };
    DeleteWorkflowsRequest: {
      workflowIds?: string[];
    };
    DeleteWorkflowsResponse: {
      failedWorkflowIds?: string[];
    };
    DescribeActionResponse: {
      action?: components["schemas"]["ActionResponseDto"];
    };
    DescribeComputeEnvResponse: {
      computeEnv?: components["schemas"]["ComputeEnvResponseDto"];
    };
    DescribeCredentialsResponse: {
      credentials?: components["schemas"]["Credentials"];
    };
    DescribeDatasetResponse: {
      dataset?: components["schemas"]["Dataset"];
    };
    DescribeLaunchResponse: {
      launch?: components["schemas"]["Launch"];
    };
    DescribeOrganizationResponse: {
      organization?: components["schemas"]["OrganizationDbDto"];
    };
    DescribePipelineInfoResponse: {
      pipelineInfo?: components["schemas"]["PipelineInfo"];
    };
    DescribePipelineResponse: {
      pipeline?: components["schemas"]["PipelineDbDto"];
    };
    DescribePipelineSecretResponse: {
      pipelineSecret?: components["schemas"]["PipelineSecret"];
    };
    DescribePlatformResponse: {
      metainfo?: components["schemas"]["PlatformMetainfo"];
    };
    DescribeTaskResponse: {
      task?: components["schemas"]["Task"];
    };
    DescribeTeamResponse: {
      team?: components["schemas"]["TeamDbDto"];
    };
    DescribeUserResponse: {
      user?: components["schemas"]["UserDbDto"];
      needConsent?: boolean;
      /** Format: int64 */
      defaultWorkspaceId?: number;
    };
    DescribeWorkflowLaunchResponse: {
      launch?: components["schemas"]["WorkflowLaunchResponse"];
    };
    DescribeWorkflowResponse: {
      orgName?: string;
      workspaceName?: string;
      optimized?: boolean;
      progress?: components["schemas"]["ProgressData"];
      labels?: components["schemas"]["LabelDbDto"][];
      platform?: components["schemas"]["ComputePlatformDto"];
      jobInfo?: components["schemas"]["JobInfoDto"];
      /** Format: int64 */
      orgId?: number;
      workflow?: components["schemas"]["Workflow"];
      /** Format: int64 */
      workspaceId?: number;
    };
    DescribeWorkspaceResponse: {
      workspace?: components["schemas"]["Workspace"];
    };
    /** Amazon EKS cluster configuration */
    EksComputeConfig: components["schemas"]["K8sComputeConfig"] & {
      /** @description AWS region */
      region?: string;
      /** @description The AWS EKS cluster name */
      clusterName?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      waveEnabled?: boolean;
      fusion2Enabled?: boolean;
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    EmptyBodyRequest: Record<string, never>;
    ErrorResponse: {
      message: string;
    };
    EventType: {
      source?: string;
      display?: string;
      description?: string;
      enabled?: boolean;
    };
    ForgeConfig: {
      /** @enum {string} */
      type?: "SPOT" | "EC2";
      /** Format: int32 */
      minCpus?: number;
      /** Format: int32 */
      maxCpus?: number;
      gpuEnabled?: boolean;
      ebsAutoScale?: boolean;
      instanceTypes?: string[];
      /** @enum {string} */
      allocStrategy?: "BEST_FIT" | "BEST_FIT_PROGRESSIVE" | "SPOT_CAPACITY_OPTIMIZED" | "SPOT_PRICE_CAPACITY_OPTIMIZED";
      imageId?: string;
      vpcId?: string;
      subnets?: string[];
      securityGroups?: string[];
      fsxMount?: string;
      fsxName?: string;
      /** Format: int32 */
      fsxSize?: number;
      disposeOnDeletion?: boolean;
      ec2KeyPair?: string;
      allowBuckets?: string[];
      /** Format: int32 */
      ebsBlockSize?: number;
      fusionEnabled?: boolean;
      /** Format: int32 */
      bidPercentage?: number;
      efsCreate?: boolean;
      efsId?: string;
      efsMount?: string;
      dragenEnabled?: boolean;
      dragenAmiId?: string;
      /** Format: int32 */
      ebsBootSize?: number;
      ecsConfig?: string;
      fargateHeadEnabled?: boolean;
      arm64Enabled?: boolean;
      dragenInstanceType?: string;
    };
    GetProgressResponse: {
      progress?: components["schemas"]["ProgressData"];
    };
    GetWorkflowMetricsResponse: {
      metrics?: components["schemas"]["WorkflowMetrics"][];
    };
    GitHubSecurityKeys: {
      username?: string;
      password?: string;
      discriminator?: string;
    };
    GitLabSecurityKeys: {
      username?: string;
      password?: string;
      token?: string;
      discriminator?: string;
    };
    GiteaSecurityKeys: {
      username?: string;
      password?: string;
      discriminator?: string;
    };
    GithubActionConfig: {
      events?: string[];
      discriminator?: string;
    };
    GithubActionEvent: {
      ref?: string;
      commitId?: string;
      commitMessage?: string;
      pusherName?: string;
      pusherEmail?: string;
      /** Format: date-time */
      timestamp?: string;
      discriminator?: string;
    };
    /** Google GKE cluster configuration */
    GkeComputeConfig: components["schemas"]["K8sComputeConfig"] & {
      /** @description The GKE cluster region - or - zone */
      region?: string;
      /** @description The GKE cluster name */
      clusterName?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      fusion2Enabled?: boolean;
      waveEnabled?: boolean;
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    /** Google Batch service configuration */
    GoogleBatchConfig: {
      location?: string;
      workDir?: string;
      spot?: boolean;
      /** Format: int32 */
      bootDiskSizeGb?: number;
      cpuPlatform?: string;
      machineType?: string;
      projectId?: string;
      sshDaemon?: boolean;
      sshImage?: string;
      /** Format: int32 */
      debugMode?: number;
      copyImage?: string;
      usePrivateAddress?: boolean;
      labels?: {
        [key: string]: string;
      };
      preRunScript?: string;
      postRunScript?: string;
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      nfsTarget?: string;
      nfsMount?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      waveEnabled?: boolean;
      fusion2Enabled?: boolean;
      serviceAccount?: string;
      network?: string;
      subnetwork?: string;
      headJobInstanceTemplate?: string;
      computeJobsInstanceTemplate?: string;
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    /** Google life sciences configuration */
    GoogleLifeSciencesConfig: {
      region?: string;
      zones?: string[];
      location?: string;
      workDir?: string;
      preemptible?: boolean;
      /** Format: int32 */
      bootDiskSizeGb?: number;
      projectId?: string;
      sshDaemon?: boolean;
      sshImage?: string;
      /** Format: int32 */
      debugMode?: number;
      copyImage?: string;
      usePrivateAddress?: boolean;
      labels?: {
        [key: string]: string;
      };
      preRunScript?: string;
      postRunScript?: string;
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      nfsTarget?: string;
      nfsMount?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    GooglePlatformMetainfo: {
      warnings?: string[];
      zones?: string[];
      locations?: string[];
      buckets?: components["schemas"]["GooglePlatformMetainfo.Bucket"][];
      filestores?: components["schemas"]["GooglePlatformMetainfo.Filestore"][];
    };
    "GooglePlatformMetainfo.Bucket": {
      path?: string;
    };
    "GooglePlatformMetainfo.Filestore": {
      name?: string;
      location?: string;
      target?: string;
    };
    GoogleSecurityKeys: {
      data?: string;
      discriminator?: string;
    };
    Iterator_String_: Record<string, never>;
    /** @enum {string} */
    JobCleanupPolicy: "on_success" | "always" | "never";
    JobInfoDto: {
      /** Format: int32 */
      exitCode?: number;
      operationId?: string;
      /** Format: int64 */
      id?: number;
      status?: string;
      message?: string;
    };
    /** Kubernetes compute configuration */
    K8sComputeConfig: {
      workDir?: string;
      preRunScript?: string;
      postRunScript?: string;
      server?: string;
      sslCert?: string;
      namespace?: string;
      computeServiceAccount?: string;
      headServiceAccount?: string;
      storageClaimName?: string;
      storageMountPath?: string;
      podCleanup?: components["schemas"]["PodCleanupPolicy"];
      headPodSpec?: string;
      servicePodSpec?: string;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    K8sSecurityKeys: {
      certificate?: string;
      privateKey?: string;
      token?: string;
      discriminator?: string;
    };
    LabelDbDto: {
      /** Format: int64 */
      id?: number;
      name?: string;
      value?: string;
      resource?: boolean;
      isDefault?: boolean;
    };
    /** @enum {string} */
    LabelType: "simple" | "resource" | "all";
    Launch: {
      id?: string;
      computeEnv?: components["schemas"]["ComputeEnv"] | null;
      pipeline: string;
      workDir?: string;
      revision?: string;
      configText?: string;
      towerConfig?: string;
      paramsText?: string;
      preRunScript?: string;
      postRunScript?: string;
      mainScript?: string;
      entryName?: string;
      schemaName?: string;
      resume?: boolean;
      resumeLaunchId?: string;
      pullLatest?: boolean;
      stubRun?: boolean;
      sessionId?: string;
      runName?: string;
      configProfiles?: string[];
      userSecrets?: string[];
      workspaceSecrets?: string[];
      optimizationId?: string;
      optimizationTargets?: string;
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      /** Format: date-time */
      dateCreated: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    LaunchActionRequest: {
      params?: {
        [key: string]: unknown;
      };
    };
    LaunchActionResponse: {
      workflowId?: string;
    };
    ListAccessTokensResponse: {
      tokens?: components["schemas"]["AccessToken"][];
    };
    ListActionsResponse: {
      actions?: components["schemas"]["ListActionsResponse.ActionInfo"][];
    };
    "ListActionsResponse.ActionInfo": {
      id?: string;
      name?: string;
      pipeline?: string;
      source?: components["schemas"]["Action.Source"];
      status?: components["schemas"]["Action.Status"];
      /** Format: date-time */
      lastSeen?: string;
      /** Format: date-time */
      dateCreated?: string;
      event?: components["schemas"]["Action.EventType"];
      endpoint?: string;
      labels?: components["schemas"]["LabelDbDto"][];
      usageCmd?: string;
    };
    ListComputeEnvsResponse: {
      computeEnvs?: components["schemas"]["ListComputeEnvsResponse.Entry"][];
    };
    "ListComputeEnvsResponse.Entry": {
      id?: string;
      name?: string;
      platform?: string;
      status?: components["schemas"]["ComputeEnv.Status"];
      message?: string;
      /** Format: date-time */
      lastUsed?: string;
      primary?: boolean;
      workspaceName?: string;
      visibility?: string;
      workDir?: string;
      credentialsId?: string;
      region?: string;
    };
    ListCredentialsResponse: {
      credentials?: components["schemas"]["Credentials"][];
    };
    ListDatasetVersionsResponse: {
      versions?: components["schemas"]["DatasetVersionDbDto"][];
    };
    ListDatasetsResponse: {
      datasets?: components["schemas"]["Dataset"][];
    };
    ListEventTypesResponse: {
      eventTypes?: components["schemas"]["EventType"][];
    };
    ListLabelsResponse: {
      labels?: components["schemas"]["LabelDbDto"][];
      /** Format: int64 */
      totalSize?: number;
    };
    ListMembersResponse: {
      /** Format: int64 */
      totalSize?: number;
      members?: components["schemas"]["MemberDbDto"][];
    };
    ListOrganizationsResponse: {
      organizations?: components["schemas"]["OrganizationDbDto"][];
      /** Format: int32 */
      totalSize?: number;
    };
    ListParticipantsResponse: {
      participants?: components["schemas"]["ParticipantDbDto"][];
      /** Format: int64 */
      totalSize?: number;
    };
    ListPipelineInfoResponse: {
      pipelines?: string[];
    };
    ListPipelineSecretsResponse: {
      pipelineSecrets?: components["schemas"]["PipelineSecret"][];
      /** Format: int64 */
      totalSize?: number;
    };
    ListPipelinesResponse: {
      pipelines?: components["schemas"]["PipelineDbDto"][];
      /** Format: int64 */
      totalSize?: number;
    };
    ListPlatformsResponse: {
      platforms?: components["schemas"]["ComputePlatform"][];
    };
    ListRegionsResponse: {
      regions?: components["schemas"]["ComputeRegion"][];
    };
    ListTasksResponse: {
      tasks?: components["schemas"]["DescribeTaskResponse"][];
      /** Format: int64 */
      total?: number;
    };
    ListTeamResponse: {
      teams?: components["schemas"]["TeamDbDto"][];
      /** Format: int64 */
      totalSize?: number;
    };
    ListWorkflowsResponse: {
      workflows?: components["schemas"]["ListWorkflowsResponse.ListWorkflowsElement"][];
      /** Format: int64 */
      totalSize?: number;
    };
    "ListWorkflowsResponse.ListWorkflowsElement": {
      orgName?: string;
      workspaceName?: string;
      optimized?: boolean;
      starred?: boolean;
      progress?: components["schemas"]["ProgressData"];
      labels?: components["schemas"]["LabelDbDto"][];
      /** Format: int64 */
      orgId?: number;
      workflow?: components["schemas"]["WorkflowDbDto"];
      /** Format: int64 */
      workspaceId?: number;
    };
    ListWorkspacesAndOrgResponse: {
      orgsAndWorkspaces?: components["schemas"]["OrgAndWorkspaceDto"][];
    };
    ListWorkspacesResponse: {
      workspaces?: components["schemas"]["WorkspaceDbDto"][];
    };
    Log: {
      name?: string;
      cmd?: string[];
      start_time?: string;
      end_time?: string;
      stdout?: string;
      stderr?: string;
      /** Format: int32 */
      exit_code?: number;
    };
    LogPage: {
      entries?: components["schemas"]["Iterator_String_"];
      rewindToken?: string;
      forwardToken?: string;
      pending?: boolean;
      message?: string;
      downloads?: components["schemas"]["LogPage.Download"][];
      truncated?: boolean;
    };
    "LogPage.Download": {
      fileName?: string;
      displayText?: string;
      saveName?: string;
    };
    /** IBM LSF configuration */
    LsfComputeConfig: components["schemas"]["AbstractGridConfig"] & {
      unitForLimits?: string;
      perJobMemLimit?: boolean;
      perTaskReserve?: boolean;
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    MemberDbDto: {
      /** Format: int64 */
      userId?: number;
      email?: string;
      avatar?: string;
      userName?: string;
      /** Format: int64 */
      memberId?: number;
      role?: components["schemas"]["OrgRole"];
      firstName?: string;
      lastName?: string;
    };
    /** Moab configuration */
    MoabComputeConfig: components["schemas"]["AbstractGridConfig"] & {
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    MultiRequestFileSchema: {
      /** Format: binary */
      file?: string;
    };
    NavbarConfig: {
      menus?: components["schemas"]["NavbarConfig.NavbarMenu"][];
    };
    "NavbarConfig.NavbarMenu": {
      label?: string;
      url?: string;
    };
    OrgAndWorkspaceDto: {
      /** Format: int64 */
      orgId?: number;
      orgName?: string;
      orgLogoUrl?: string;
      /** Format: int64 */
      workspaceId?: number;
      workspaceName?: string;
      workspaceFullName?: string;
      visibility?: components["schemas"]["Visibility"];
      roles?: string[];
    };
    /** @enum {string} */
    OrgRole: "owner" | "member" | "collaborator";
    Organization: {
      /** Format: int64 */
      id?: number | null;
      name: string;
      fullName: string;
      description?: string;
      location?: string;
      website?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    OrganizationDbDto: {
      /** Format: int64 */
      orgId?: number;
      name?: string;
      fullName?: string;
      description?: string;
      location?: string;
      website?: string;
      logoId?: string;
      logoUrl?: string;
      /** Format: int64 */
      memberId?: number;
      memberRole?: components["schemas"]["OrgRole"];
      paying?: boolean;
    };
    ParticipantDbDto: {
      /** Format: int64 */
      teamId?: number;
      /** Format: int64 */
      participantId?: number;
      wspRole?: components["schemas"]["WspRole"];
      orgRole?: components["schemas"]["OrgRole"];
      teamName?: string;
      teamAvatarUrl?: string;
      userAvatarUrl?: string;
      email?: string;
      userName?: string;
      /** Format: int64 */
      memberId?: number;
      firstName?: string;
      lastName?: string;
      type?: components["schemas"]["ParticipantType"];
    };
    /** @enum {string} */
    ParticipantType: "MEMBER" | "TEAM" | "COLLABORATOR";
    PipelineDbDto: {
      /** Format: int64 */
      pipelineId?: number;
      name?: string;
      description?: string;
      icon?: string;
      repository?: string;
      /** Format: int64 */
      userId?: number;
      userName?: string;
      userFirstName?: string;
      userLastName?: string;
      /** Format: int64 */
      orgId?: number;
      orgName?: string;
      /** Format: int64 */
      workspaceId?: number;
      workspaceName?: string;
      visibility?: string;
      deleted?: boolean;
      /** Format: date-time */
      lastUpdated?: string;
      optimizationId?: string;
      optimizationTargets?: string;
      optimizationStatus?: components["schemas"]["PipelineOptimizationStatus"];
      labels?: components["schemas"]["LabelDbDto"][];
      computeEnv?: components["schemas"]["ComputeEnvDbDto"];
    };
    PipelineInfo: {
      projectName?: string;
      simpleName?: string;
      repositoryUrl?: string;
      cloneUrl?: string;
      provider?: string;
      configFiles?: string[];
      workDirs?: string[];
      revisions?: string[];
      profiles?: string[];
      manifest?: components["schemas"]["WfManifest"];
      warnings?: string[];
    };
    /** @enum {string} */
    PipelineOptimizationStatus: "OPTIMIZED" | "OPTIMIZABLE" | "UNAVAILABLE";
    /** @enum {string} */
    PipelineQueryAttribute: "optimized" | "labels" | "computeEnv";
    /** @enum {string} */
    PipelineSchemaAttributes: "schema" | "params";
    PipelineSchemaResponse: {
      schema: string;
      params?: string;
    };
    PipelineSecret: {
      /** Format: int64 */
      id?: number | null;
      name: string;
      /** Format: date-time */
      lastUsed?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    PlatformMetainfo: components["schemas"]["AwsBatchPlatformMetainfo"] | components["schemas"]["GooglePlatformMetainfo"];
    /** @enum {string} */
    PodCleanupPolicy: "on_success" | "always" | "never";
    ProcessLoad: {
      /** Format: int64 */
      pending: number;
      /** Format: int64 */
      submitted: number;
      /** Format: int64 */
      running: number;
      /** Format: int64 */
      succeeded: number;
      /** Format: int64 */
      failed: number;
      /** Format: int64 */
      cached: number;
      /** Format: float */
      memoryEfficiency?: number;
      /** Format: float */
      cpuEfficiency?: number;
      process: string;
      /**
       * Format: int64
       * @deprecated
       */
      cpus: number;
      /**
       * Format: int64
       * @deprecated
       */
      cpuTime: number;
      /**
       * Format: int64
       * @deprecated
       */
      cpuLoad: number;
      /**
       * Format: int64
       * @deprecated
       */
      memoryRss: number;
      /**
       * Format: int64
       * @deprecated
       */
      memoryReq: number;
      /**
       * Format: int64
       * @deprecated
       */
      readBytes: number;
      /**
       * Format: int64
       * @deprecated
       */
      writeBytes: number;
      /**
       * Format: int64
       * @deprecated
       */
      volCtxSwitch: number;
      /**
       * Format: int64
       * @deprecated
       */
      invCtxSwitch: number;
      /**
       * Format: int64
       * @deprecated
       */
      loadTasks: number;
      /** Format: int64 */
      loadCpus: number;
      /** Format: int64 */
      loadMemory: number;
      /** Format: int64 */
      peakCpus: number;
      /** Format: int64 */
      peakTasks: number;
      /** Format: int64 */
      peakMemory: number;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    ProgressData: {
      workflowProgress?: components["schemas"]["WorkflowLoad"];
      processesProgress?: components["schemas"]["ProcessLoad"][];
    };
    RandomWorkflowNameResponse: {
      name?: string;
    };
    ResourceData: {
      warnings?: string[];
      /** Format: float */
      mean?: number;
      /** Format: float */
      min?: number;
      /** Format: float */
      q1?: number;
      /** Format: float */
      q2?: number;
      /** Format: float */
      q3?: number;
      /** Format: float */
      max?: number;
      minLabel?: string;
      maxLabel?: string;
      q1Label?: string;
      q2Label?: string;
      q3Label?: string;
    };
    RunId: {
      run_id?: string;
    };
    RunListResponse: {
      runs?: components["schemas"]["RunStatus"][];
      next_page_token?: string;
    };
    RunLog: {
      run_id?: string;
      request?: components["schemas"]["RunRequest"];
      state?: components["schemas"]["State"];
      run_log?: components["schemas"]["Log"];
      task_logs?: components["schemas"]["Log"][];
      outputs?: Record<string, never>;
    };
    RunRequest: {
      workflow_params?: Record<string, never>;
      workflow_type?: string;
      workflow_type_version?: string;
      tags?: {
        [key: string]: string;
      };
      workflow_engine_parameters?: {
        [key: string]: string;
      };
      workflow_url?: string;
    };
    RunStatus: {
      run_id?: string;
      state?: components["schemas"]["State"];
    };
    SSHSecurityKeys: {
      privateKey?: string;
      passphrase?: string;
      discriminator?: string;
    };
    SecurityKeys: {
      discriminator?: string;
    } & (components["schemas"]["AwsSecurityKeys"] | components["schemas"]["GoogleSecurityKeys"] | components["schemas"]["GitHubSecurityKeys"] | components["schemas"]["GitLabSecurityKeys"] | components["schemas"]["BitBucketSecurityKeys"] | components["schemas"]["GiteaSecurityKeys"] | components["schemas"]["SSHSecurityKeys"] | components["schemas"]["K8sSecurityKeys"] | components["schemas"]["AzureSecurityKeys"] | components["schemas"]["AzureReposSecurityKeys"] | components["schemas"]["ContainerRegistryKeys"] | components["schemas"]["AgentSecurityKeys"] | components["schemas"]["CodeCommitSecurityKeys"]);
    ServiceInfo: {
      version?: string;
      apiVersion?: string;
      commitId?: string;
      authTypes?: string[];
      loginPath?: string;
      navbar?: components["schemas"]["NavbarConfig"];
      /** Format: int32 */
      heartbeatInterval?: number;
      userWorkspaceEnabled?: boolean;
      allowInstanceCredentials?: boolean;
      landingUrl?: string;
      termsOfUseUrl?: string;
      contentUrl?: string;
      analytics?: components["schemas"]["Analytics"];
      /** @deprecated */
      allowLocalRepos?: boolean;
      /** Format: int64 */
      contentMaxFileSize?: number;
      waveEnabled?: boolean;
      groundswellEnabled?: boolean;
      groundswellAllowedWorkspaces?: number[];
      waveAllowedWorkspaces?: number[];
      forgePrefix?: string;
      seqeraCloud?: boolean;
      evalWorkspaceIds?: number[];
      contactEmail?: string;
      allowNextflowCliLogs?: boolean;
    };
    ServiceInfoResponse: {
      serviceInfo?: components["schemas"]["ServiceInfo"];
    };
    /** Slurm configuration */
    SlurmComputeConfig: components["schemas"]["AbstractGridConfig"] & {
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    /** @enum {string} */
    State: "UNKNOWN" | "QUEUED" | "INITIALIZING" | "RUNNING" | "PAUSED" | "COMPLETE" | "EXECUTOR_ERROR" | "SYSTEM_ERROR" | "CANCELED" | "CANCELING";
    SubmitWorkflowLaunchRequest: {
      launch?: components["schemas"]["WorkflowLaunchRequest"];
    };
    SubmitWorkflowLaunchResponse: {
      workflowId?: string;
    };
    Task: {
      hash?: string;
      name?: string;
      process?: string;
      tag?: string;
      /** Format: date-time */
      submit?: string;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      complete?: string;
      module?: string[];
      container?: string;
      /** Format: int32 */
      attempt?: number;
      script?: string;
      scratch?: string;
      workdir?: string;
      queue?: string;
      /** Format: int32 */
      cpus?: number;
      /** Format: int64 */
      memory?: number;
      /** Format: int64 */
      disk?: number;
      /** Format: int64 */
      time?: number;
      env?: string;
      executor?: string;
      machineType?: string;
      cloudZone?: string;
      priceModel?: components["schemas"]["CloudPriceModel"];
      cost?: number;
      errorAction?: string;
      /** Format: int32 */
      exitStatus?: number;
      /** Format: int64 */
      duration?: number;
      /** Format: int64 */
      realtime?: number;
      nativeId?: string;
      /** Format: double */
      pcpu?: number;
      /** Format: double */
      pmem?: number;
      /** Format: int64 */
      rss?: number;
      /** Format: int64 */
      vmem?: number;
      /** Format: int64 */
      peakRss?: number;
      /** Format: int64 */
      peakVmem?: number;
      /** Format: int64 */
      rchar?: number;
      /** Format: int64 */
      wchar?: number;
      /** Format: int64 */
      syscr?: number;
      /** Format: int64 */
      syscw?: number;
      /** Format: int64 */
      readBytes?: number;
      /** Format: int64 */
      writeBytes?: number;
      /** Format: int64 */
      volCtxt?: number;
      /** Format: int64 */
      invCtxt?: number;
      exit?: string;
      /** Format: int64 */
      id?: number | null;
      /** Format: int64 */
      taskId: number;
      status: components["schemas"]["TaskStatus"];
      /** Format: date-time */
      dateCreated?: string | null;
      /** Format: date-time */
      lastUpdated?: string | null;
    };
    /** @enum {string} */
    TaskStatus: "NEW" | "SUBMITTED" | "RUNNING" | "CACHED" | "COMPLETED" | "FAILED" | "ABORTED";
    Team: {
      /** Format: int64 */
      id?: number | null;
      name: string;
      description?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    TeamDbDto: {
      /** Format: int64 */
      teamId?: number;
      /** Format: int64 */
      membersCount?: number;
      avatarUrl?: string;
      description?: string;
      name?: string;
    };
    TraceBeginRequest: {
      workflow?: components["schemas"]["Workflow"];
      processNames?: string[];
      towerLaunch?: boolean;
    };
    TraceBeginResponse: {
      status?: components["schemas"]["TraceProcessingStatus"];
      workflowId?: string;
      watchUrl?: string;
    };
    TraceCompleteRequest: {
      workflow?: components["schemas"]["Workflow"];
      metrics?: components["schemas"]["WorkflowMetrics"][];
      progress?: components["schemas"]["TraceProgressData"];
    };
    TraceCompleteResponse: {
      status?: components["schemas"]["TraceProcessingStatus"];
      workflowId?: string;
    };
    TraceCreateRequest: {
      sessionId?: string;
      runName?: string;
      projectName?: string;
      repository?: string;
      workflowId?: string;
    };
    TraceCreateResponse: {
      message?: string;
      workflowId?: string;
    };
    TraceHeartbeatRequest: {
      progress?: components["schemas"]["TraceProgressData"];
    };
    TraceHeartbeatResponse: {
      message?: string;
    };
    /** @enum {string} */
    TraceProcessingStatus: "OK" | "KO";
    TraceProgressData: {
      /** Format: int32 */
      pending?: number;
      /** Format: int32 */
      submitted?: number;
      /** Format: int32 */
      running?: number;
      /** Format: int32 */
      succeeded?: number;
      /** Format: int32 */
      cached?: number;
      /** Format: int32 */
      failed?: number;
      /** Format: int32 */
      aborted?: number;
      /** Format: int32 */
      stored?: number;
      /** Format: int32 */
      ignored?: number;
      /** Format: int32 */
      retries?: number;
      /** Format: int64 */
      loadCpus?: number;
      /** Format: int64 */
      loadMemory?: number;
      /** Format: int32 */
      peakRunning?: number;
      /** Format: int64 */
      peakCpus?: number;
      /** Format: int64 */
      peakMemory?: number;
      processes?: components["schemas"]["TraceProgressDetail"][];
    };
    TraceProgressDetail: {
      /** Format: int32 */
      index?: number;
      name?: string;
      /** Format: int32 */
      pending?: number;
      /** Format: int32 */
      submitted?: number;
      /** Format: int32 */
      running?: number;
      /** Format: int32 */
      succeeded?: number;
      /** Format: int32 */
      cached?: number;
      /** Format: int32 */
      failed?: number;
      /** Format: int32 */
      aborted?: number;
      /** Format: int32 */
      stored?: number;
      /** Format: int32 */
      ignored?: number;
      /** Format: int32 */
      retries?: number;
      terminated?: boolean;
      /** Format: int64 */
      loadCpus?: number;
      /** Format: int64 */
      loadMemory?: number;
      /** Format: int32 */
      peakRunning?: number;
      /** Format: int64 */
      peakCpus?: number;
      /** Format: int64 */
      peakMemory?: number;
    };
    TraceProgressRequest: {
      tasks?: components["schemas"]["Task"][];
      progress?: components["schemas"]["TraceProgressData"];
    };
    TraceProgressResponse: {
      status?: components["schemas"]["TraceProcessingStatus"];
      workflowId?: string;
    };
    /** Univa Grid Engine configuration */
    UnivaComputeConfig: components["schemas"]["AbstractGridConfig"] & {
      environment?: components["schemas"]["ConfigEnvVariable"][];
      /** @description property to select the compute config platform */
      discriminator?: string;
    };
    UpdateActionRequest: {
      name?: string;
      launch?: components["schemas"]["WorkflowLaunchRequest"];
    };
    UpdateComputeEnvRequest: {
      name?: string;
    };
    UpdateCredentialsRequest: {
      credentials?: components["schemas"]["Credentials"];
    };
    UpdateDatasetRequest: {
      name?: string;
      description?: string;
    };
    UpdateLabelRequest: {
      name?: string;
      value?: string;
      isDefault?: boolean;
    };
    UpdateLabelResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      value?: string;
      isDefault?: boolean;
    };
    UpdateMemberRoleRequest: {
      role?: components["schemas"]["OrgRole"];
    };
    UpdateOrganizationRequest: {
      logoId?: string;
      paying?: boolean | null;
      website?: string;
      location?: string;
      description?: string;
      fullName?: string;
      name?: string;
    };
    UpdateParticipantRoleRequest: {
      role?: components["schemas"]["WspRole"];
    };
    UpdatePipelineRequest: {
      name?: string;
      description?: string;
      icon?: string;
      launch?: components["schemas"]["WorkflowLaunchRequest"];
      labelIds?: number[];
    };
    UpdatePipelineResponse: {
      pipeline?: components["schemas"]["PipelineDbDto"];
    };
    UpdatePipelineSecretRequest: {
      value?: string;
    };
    UpdateTeamRequest: {
      avatarId?: string;
      description?: string;
      name?: string;
    };
    UpdateWorkspaceRequest: {
      visibility?: components["schemas"]["Visibility"];
      description?: string;
      fullName?: string;
      name?: string;
    };
    UploadDatasetVersionResponse: {
      version?: components["schemas"]["DatasetVersionDbDto"];
    };
    UserDbDto: {
      /** Format: int64 */
      id?: number;
      userName: string;
      /** Format: email */
      email: string;
      firstName?: string;
      lastName?: string;
      organization?: string;
      description?: string;
      avatar?: string;
      avatarId?: string;
      notification?: boolean;
      termsOfUseConsent?: boolean;
      marketingConsent?: boolean;
      /** Format: date-time */
      lastAccess?: string;
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
      deleted?: boolean;
    };
    /** @enum {string} */
    Visibility: "PRIVATE" | "SHARED";
    WesErrorResponse: {
      msg?: string;
      /** Format: int32 */
      status_code?: number;
    };
    WfManifest: {
      nextflowVersion?: string;
      defaultBranch?: string;
      version?: string;
      homePage?: string;
      gitmodules?: string;
      description?: string;
      name?: string;
      mainScript?: string;
      author?: string;
    };
    WfNextflow: {
      version?: string;
      build?: string;
      /** Format: date-time */
      timestamp?: string;
    };
    WfStats: {
      computeTimeFmt?: string;
      /** Format: int32 */
      cachedCount?: number;
      /** Format: int32 */
      failedCount?: number;
      /** Format: int32 */
      ignoredCount?: number;
      /** Format: int32 */
      succeedCount?: number;
      cachedCountFmt?: string;
      succeedCountFmt?: string;
      failedCountFmt?: string;
      ignoredCountFmt?: string;
      /** Format: float */
      cachedPct?: number;
      /** Format: float */
      failedPct?: number;
      /** Format: float */
      succeedPct?: number;
      /** Format: float */
      ignoredPct?: number;
      /** Format: int64 */
      cachedDuration?: number;
      /** Format: int64 */
      failedDuration?: number;
      /** Format: int64 */
      succeedDuration?: number;
    };
    Workflow: {
      status?: components["schemas"]["WorkflowStatus"];
      /** Format: int64 */
      ownerId?: number;
      repository?: string;
      id?: string;
      /** Format: date-time */
      submit: string;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      complete?: string;
      /** Format: date-time */
      dateCreated?: string | null;
      /** Format: date-time */
      lastUpdated?: string | null;
      runName: string;
      sessionId: string;
      profile?: string;
      workDir: string;
      commitId?: string;
      userName: string;
      scriptId?: string;
      revision?: string;
      commandLine: string;
      projectName: string;
      scriptName?: string;
      launchId?: string;
      configFiles?: string[];
      params?: {
        [key: string]: unknown;
      };
      configText?: string;
      manifest?: components["schemas"]["WfManifest"];
      nextflow?: components["schemas"]["WfNextflow"];
      stats?: components["schemas"]["WfStats"];
      errorMessage?: string;
      errorReport?: string;
      deleted?: boolean;
      projectDir?: string;
      homeDir?: string;
      container?: string;
      containerEngine?: string;
      scriptFile?: string;
      launchDir?: string;
      /** Format: int64 */
      duration?: number;
      /** Format: int32 */
      exitStatus?: number;
      resume?: boolean;
      success?: boolean;
      logFile?: string;
      outFile?: string;
      operationId?: string;
    };
    WorkflowDbDto: {
      /** Format: int64 */
      ownerId?: number;
      params?: {
        [key: string]: unknown;
      };
      profile?: string;
      container?: string;
      errorReport?: string;
      /** Format: date-time */
      lastUpdated?: string;
      /** Format: int32 */
      exitStatus?: number;
      deleted?: boolean;
      commitId?: string;
      revision?: string;
      /** Format: date-time */
      submit?: string;
      commandLine?: string;
      launchDir?: string;
      /** Format: date-time */
      complete?: string;
      containerEngine?: string;
      sessionId?: string;
      runName?: string;
      resume?: boolean;
      configFiles?: string[];
      projectDir?: string;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      dateCreated?: string;
      nextflow?: components["schemas"]["WfNextflow"];
      success?: boolean;
      errorMessage?: string;
      stats?: components["schemas"]["WfStats"];
      repository?: string;
      id?: string;
      workDir?: string;
      userName?: string;
      scriptId?: string;
      projectName?: string;
      scriptName?: string;
      launchId?: string;
      status?: components["schemas"]["WorkflowStatus"];
      configText?: string;
      manifest?: components["schemas"]["WfManifest"];
      homeDir?: string;
      scriptFile?: string;
      /** Format: int64 */
      duration?: number;
    };
    WorkflowLaunchRequest: {
      id?: string;
      computeEnvId?: string;
      runName?: string;
      pipeline?: string;
      workDir?: string;
      revision?: string;
      sessionId?: string;
      configProfiles?: string[];
      userSecrets?: string[];
      workspaceSecrets?: string[];
      configText?: string;
      towerConfig?: string;
      paramsText?: string;
      preRunScript?: string;
      postRunScript?: string;
      mainScript?: string;
      entryName?: string;
      schemaName?: string;
      resume?: boolean;
      pullLatest?: boolean;
      stubRun?: boolean;
      optimizationId?: string;
      optimizationTargets?: string;
      labelIds?: number[];
      /** Format: int32 */
      headJobCpus?: number;
      /** Format: int32 */
      headJobMemoryMb?: number;
      /** Format: date-time */
      dateCreated?: string;
    };
    WorkflowLaunchResponse: {
      id?: string;
      computeEnv?: components["schemas"]["ComputeEnv"];
      pipeline?: string;
      /** Format: int64 */
      pipelineId?: number;
      workDir?: string;
      revision?: string;
      sessionId?: string;
      configProfiles?: string[];
      userSecrets?: string[];
      workspaceSecrets?: string[];
      configText?: string;
      towerConfig?: string;
      paramsText?: string;
      preRunScript?: string;
      postRunScript?: string;
      mainScript?: string;
      entryName?: string;
      schemaName?: string;
      resume?: boolean;
      pullLatest?: boolean;
      stubRun?: boolean;
      resumeDir?: string;
      resumeCommitId?: string;
      /** Format: int32 */
      headJobMemoryMb?: number;
      /** Format: int32 */
      headJobCpus?: number;
      optimizationId?: string;
      optimizationTargets?: string;
      /** Format: date-time */
      dateCreated?: string;
    };
    WorkflowLoad: {
      /** Format: int64 */
      pending: number;
      /** Format: int64 */
      submitted: number;
      /** Format: int64 */
      running: number;
      /** Format: int64 */
      succeeded: number;
      /** Format: int64 */
      failed: number;
      /** Format: int64 */
      cached: number;
      /** Format: float */
      memoryEfficiency?: number;
      /** Format: float */
      cpuEfficiency?: number;
      /** Format: int64 */
      cpus: number;
      /** Format: int64 */
      cpuTime: number;
      /** Format: int64 */
      cpuLoad: number;
      /** Format: int64 */
      memoryRss: number;
      /** Format: int64 */
      memoryReq: number;
      /** Format: int64 */
      readBytes: number;
      /** Format: int64 */
      writeBytes: number;
      /** Format: int64 */
      volCtxSwitch: number;
      /** Format: int64 */
      invCtxSwitch: number;
      cost?: number;
      /** Format: int64 */
      loadTasks: number;
      /** Format: int64 */
      loadCpus: number;
      /** Format: int64 */
      loadMemory: number;
      /** Format: int64 */
      peakCpus: number;
      /** Format: int64 */
      peakTasks: number;
      /** Format: int64 */
      peakMemory: number;
      executors?: string[];
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    WorkflowLogResponse: {
      log?: components["schemas"]["LogPage"];
    };
    WorkflowMetrics: {
      /** Format: int64 */
      id?: number | null;
      process: string;
      cpu?: components["schemas"]["ResourceData"];
      mem?: components["schemas"]["ResourceData"];
      vmem?: components["schemas"]["ResourceData"];
      time?: components["schemas"]["ResourceData"];
      reads?: components["schemas"]["ResourceData"];
      writes?: components["schemas"]["ResourceData"];
      cpuUsage?: components["schemas"]["ResourceData"];
      memUsage?: components["schemas"]["ResourceData"];
      timeUsage?: components["schemas"]["ResourceData"];
    };
    /** @enum {string} */
    WorkflowQueryAttribute: "optimized" | "labels" | "minimal";
    /** @enum {string} */
    WorkflowStatus: "SUBMITTED" | "RUNNING" | "SUCCEEDED" | "FAILED" | "CANCELLED" | "UNKNOWN";
    Workspace: {
      /** Format: int64 */
      id?: number | null;
      name: string;
      fullName: string;
      description?: string;
      visibility: components["schemas"]["Visibility"];
      /** Format: date-time */
      dateCreated?: string;
      /** Format: date-time */
      lastUpdated?: string;
    };
    WorkspaceDbDto: {
      /** Format: int64 */
      id?: number;
      name?: string;
      fullName?: string;
      description?: string;
      visibility?: components["schemas"]["Visibility"];
    };
    /** @enum {string} */
    WspRole: "owner" | "admin" | "maintain" | "launch" | "connect" | "view";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List actions
   * @description Lists all available actions in a user context, enriched by `attributes`. Append `?workspaceId` to list actions in a workspace context.
   */
  ListActions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Additional attribute values to include in the response (`labels`). Returns an empty value (`labels: null`) if omitted. */
        attributes?: components["schemas"]["ActionQueryAttribute"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListActionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create action
   * @description Creates a new pipeline action. Append `?workspaceId` to associate the action with the given workspace.
   */
  CreateAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Action create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateActionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateActionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Add labels to actions
   * @description Adds the given list of labels to the given pipeline actions. Existing labels are preserved.
   */
  AddLabelsToActions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels add request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateActionLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Replace action labels
   * @description Applies the given list of labels to the given pipeline actions. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
   */
  ApplyLabelsToActions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels apply request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateActionLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Remove labels from actions
   * @description Removes the given list of labels from the given pipeline actions.
   */
  RemoveLabelsFromActions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels remove request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateActionLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List action event types
   * @description Lists the supported event types that trigger a pipeline action. Append `?workspaceId` to list event types in a workspace context.
   */
  ListActionTypes: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListEventTypesResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Validate action name
   * @description Confirms the validity of the given action name. Append `?name=<your_action_name>`.
   */
  ValidateActionName: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Action name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe action
   * @description Retrieves the details of the pipeline action identified by the given `actionId`.
   */
  DescribeAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Additional attribute values to include in the response (`labels`). Returns an empty value (`labels: null`) if omitted. */
        attributes?: components["schemas"]["ActionQueryAttribute"][];
      };
      path: {
        /** @description Action string identifier */
        actionId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeActionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update action
   * @description Updates the details of the action identified by the given `actionId`. The `source` of an existing action cannot be changed.
   */
  UpdateAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Action string identifier */
        actionId: string;
      };
    };
    /** @description Action update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateActionRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete action
   * @description Deletes the pipeline action identified by the given `actionId`.
   */
  DeleteAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Action string identifier */
        actionId: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Trigger Tower Launch action
   * @description Triggers the execution of the Tower Launch action identified by the given `actionId`.
   */
  LaunchAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Action string identifier */
        actionId: string;
      };
    };
    /** @description Action launch request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LaunchActionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LaunchActionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Pause or resume action
   * @description Pauses or resumes the pipeline action identified by the given `actionId`.
   */
  PauseAction: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Action string identifier */
        actionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyBodyRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Create the avatar image */
  CreateAvatar: {
    /** @description Image file request */
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAvatarResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Download the avatar image */
  DownloadAvatar: {
    parameters: {
      path: {
        /** @description Avatar string identifier */
        avatarId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found element */
      404: {
        content: never;
      };
    };
  };
  /**
   * List compute environments
   * @description Lists all available Tower compute environments in a user context. Append `?workspaceId` to list compute environments in a workspace context, and `?status` to filter by compute environment status.
   */
  ListComputeEnvs: {
    parameters: {
      query?: {
        /** @description Compute environment status */
        status?: string;
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListComputeEnvsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create compute environment
   * @description Creates a new Tower compute environment. Append `?workspaceId` to create the environment in a workspace context.
   */
  CreateComputeEnv: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Compute environment create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateComputeEnvRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateComputeEnvResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Validate compute environment name
   * @description Confirms the validity of the given compute environment name in a user context. Append `?name=<your_ce_name>`.
   */
  ValidateComputeEnvName: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Compute environment name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe compute environment
   * @description Retrieves the details of the Tower compute environment identified by the given `computeEnvId`.
   */
  DescribeComputeEnv: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Additional attribute values to include in the response (`labels`). Returns an empty value (`labels: null`) if omitted. */
        attributes?: components["schemas"]["ComputeEnvQueryAttribute"][];
      };
      path: {
        /** @description Compute environment string identifier */
        computeEnvId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeComputeEnvResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update compute environment
   * @description Updates the details of the compute environment identified by the given `computeEnvId`.
   */
  UpdateComputeEnv: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Compute environment string identifier */
        computeEnvId: string;
      };
    };
    /** @description Compute environment update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateComputeEnvRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete compute environment
   * @description Deletes the Tower compute environment identified by the given `computeEnvId`.
   */
  DeleteComputeEnv: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Compute environment string identifier */
        computeEnvId: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Conflicting deletion */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Define primary compute environment
   * @description Selects the compute environment identified by the given `computeEnvId` as the primary compute environment in the given workspace context.
   */
  UpdateComputeEnvPrimary: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Compute environment string identifier */
        computeEnvId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyBodyRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List credentials
   * @description Lists all available Tower credentials in a user context. Append `?workspaceId` to list credentials in a workspace context, and `?platformId` to filter credentials by computing platform.
   */
  ListCredentials: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Platform string identifier */
        platformId?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListCredentialsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create credentials
   * @description Creates new Tower credentials in a user context. Append `?workspaceId` to create the credentials in a workspace context.
   */
  CreateCredentials: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Credentials create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCredentialsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateCredentialsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Validate credential name
   * @description Validates the given credentials name. Append `?name=<your_credential_name>`.
   */
  ValidateCredentialsName: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Credentials name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe credentials
   * @description Retrieves the details of the credentials identified by the given `credentialsId`.
   */
  DescribeCredentials: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Credentials string identifier */
        credentialsId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeCredentialsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update credentials
   * @description Updates the details of the credentials identified by the given `credentialsId`.
   */
  UpdateCredentials: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Credentials string identifier */
        credentialsId: string;
      };
    };
    /** @description Credentials update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCredentialsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete credentials
   * @description Deletes the credentials identified by the given `credentialsId`.
   */
  DeleteCredentials: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description If set credentials deletion will be blocked by running jobs that depend on them */
        checked?: boolean;
      };
      path: {
        /** @description Credentials string identifier */
        credentialsId: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Running jobs block the deletion of this credentials */
      409: {
        content: {
          "application/json": components["schemas"]["DeleteCredentialsConflictException"];
        };
      };
    };
  };
  /**
   * List available datasets
   * @description Lists all available datasets in the user context. Append `?workspaceId` to list datasets in a workspace context
   */
  ListDatasets: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create dataset
   * @description Creates a new Tower dataset in the user context. Include the dataset file and details in your request body. Append `?workspaceId` to create the dataset in a workspace context.
   */
  CreateDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Dataset create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDatasetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDatasetResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List latest dataset versions
   * @description Lists the latest version of each dataset in the user context. Append `?workspaceId` to list latest versions in a workspace context.
   */
  ListWorkspaceDatasetVersions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        mimeType?: string | null;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetVersionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update dataset
   * @description Updates the details of the dataset identified by the given `datasetId`.
   */
  UpdateDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    /** @description Dataset update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDatasetRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete dataset
   * @description Deletes the dataset identified by the given `datasetId`.
   */
  DeleteDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe dataset
   * @description Retrieves the metadata of the dataset identified by the given `datasetId`.
   */
  DescribeDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeDatasetResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Upload new dataset version
   * @description Uploads the CSV or TSV content to create a new version of the dataset identified by the given `datasetId`.
   */
  UploadDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Uploaded file has header */
        header?: boolean;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    /** @description Dataset file request */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["MultiRequestFileSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadDatasetVersionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Download dataset content
   * @description Downloads the content of the dataset identified by the given `datasetId` and `version`.
   */
  DownloadDataset: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
        /** @description Version number to download */
        version: string;
        /** @description File name for the downloaded dataset content */
        fileName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List all dataset versions
   * @description Lists all versions of the given `datasetId`.
   */
  ListDatasetVersions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Optional MIME type filter */
        mimeType?: string;
      };
      path: {
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetVersionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * GA4GH: List runs
   * @description Uses the GA4GH workflow execution service API to list all run records.
   */
  GaRunList: {
    parameters: {
      query?: {
        /** @description Page size */
        page_size?: number;
        /** @description Page token */
        page_token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunListResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * GA4GH: Launch run
   * @description Uses the GA4GH workflow execution service API to launch a new run. Runs are launched in the user workspace context by default. To launch in an organization workspace context, include the `workspaceId` in `workflow_engine_parameters`. Runs are launched with the workspace primary compute environment by default. To launch with a different compute environment, include the `computeEnvId` in `workflow_engine_parameters`.
   */
  GaRunCreate: {
    /** @description Run request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunRequest"];
        "multipart/form-data": components["schemas"]["RunRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunId"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * GA4GH: Describe run
   * @description Uses the GA4GH workflow execution service API to retrieve the details of the run assoiated with the given `run_id`.
   */
  GaRunDescribe: {
    parameters: {
      path: {
        /** @description Run string identifier */
        run_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunLog"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * GA4GH: Cancel run
   * @description Uses the GA4GH workflow execution service API to cancel the run associated with the given `run_id`.
   */
  GaRunCancel: {
    parameters: {
      path: {
        /** @description Run string identifier */
        run_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyBodyRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunId"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * GA4GH: Retrieve run status
   * @description Uses the GA4GH workflow execution service API to retrieve the status of the run associated with the given `run_id`.
   */
  GaRunStatus: {
    parameters: {
      path: {
        /** @description Run string identifier */
        run_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunStatus"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** GA4GH workflow execution service API info */
  GaServiceInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceInfo"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["WesErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List labels
   * @description Lists all available labels in a user context. Append `?workspaceId` to list labels in a workspace context.
   */
  ListLabels: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Pagination max results */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
        /** @description Label type */
        type?: components["schemas"]["LabelType"];
        /** @description Label default flag */
        isDefault?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListLabelsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create label
   * @description Creates a new label or returns an existing label based on name/value. By default the operation works in a user context, append `?workspaceId` to create/retrieve a label in a workspace context. Resource labels include `resource: true` and a `value`.
   */
  CreateLabel: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Provide a label `name`. Set `resource: true` for resource labels. Only resource labels have a `value` â€” if `resource: true`, include a `value`. Else, omit `value` from your request body. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLabelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateLabelResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update label
   * @description Updates the label identified by the given `labelId`.
   */
  UpdateLabel: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Label numeric identifier */
        labelId: number;
      };
    };
    /** @description Label update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateLabelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateLabelResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete label
   * @description Deletes the label identified by the given `labelId`.
   */
  DeleteLabel: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Label numeric identifier */
        labelId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe Launch record
   * @description Retrieves the details of the launch identified by the given `launchId`.
   */
  DescribeLaunch: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Launch string identifier */
        launchId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeLaunchResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe launch datasets
   * @description Retrieves the details of the datasets used in the launch identified by the given `launchId`.
   */
  ListLaunchDatasetVersions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Launch string identifier */
        launchId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeLaunchResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List organizations
   * @description Lists all available organizations in a user context.
   */
  ListOrganizations: {
    parameters: {
      query?: {
        /** @description Organization user role identifier */
        role?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListOrganizationsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create organization
   * @description Creates a new organization.
   */
  CreateOrganization: {
    /** @description Organization create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrganizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateOrganizationResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Validate organization name
   * @description Confirms the validity of the given organization name. Append `?name=<your_org_name>`.
   */
  ValidateOrganizationName: {
    parameters: {
      query?: {
        /** @description Organization name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe organization
   * @description Retrieves the details of the organization identified by the given `orgId`.
   */
  DescribeOrganization: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeOrganizationResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update organization
   * @description Updates the details of the organization identified by the given `orgId`.
   */
  UpdateOrganization: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    /** @description Organization update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrganizationRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete organization
   * @description Deletes the organization identified by the given `orgId`.
   */
  DeleteOrganization: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List organization collaborators
   * @description Lists the collaborators of the organization identified by the given `orgId`.
   */
  ListOrganizationCollaborators: {
    parameters: {
      query?: {
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMembersResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List organization members
   * @description Lists the members of the organization identified by the given `orgId`.
   */
  ListOrganizationMembers: {
    parameters: {
      query?: {
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMembersResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Add organization member
   * @description Adds a new member to the organization identified by the given `orgId`.
   */
  CreateOrganizationMember: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    /** @description Member addition request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddMemberRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AddMemberResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Leave organization
   * @description Removes the requesting user from the organization identified by the given `orgId`.
   */
  LeaveOrganization: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete member
   * @description Deletes the member identified by the given `memberId`.
   */
  DeleteOrganizationMember: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Organization member numeric identifier */
        memberId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update member role
   * @description Updates the role of the member identified by the given `memberId`.
   */
  UpdateOrganizationMemberRole: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Organization member numeric identifier */
        memberId: number;
      };
    };
    /** @description Member role update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMemberRoleRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List organization teams
   * @description Lists all teams in the organization identified by the given `orgId`.
   */
  ListOrganizationTeams: {
    parameters: {
      query?: {
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTeamResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create team
   * @description Creates a new team in the organization identified by the given `orgId`.
   */
  CreateOrganizationTeam: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    /** @description Team create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTeamResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Validate team name
   * @description Confirms the validity of the given team name. Append `?name=<your_team_name>`.
   */
  ValidateTeamName: {
    parameters: {
      query?: {
        /** @description Organization name to validate */
        name?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe team
   * @description Retrieves the details of the team identified by the given `teamId`.
   */
  DescribeOrganizationTeam: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeTeamResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update team
   * @description Updates the details of the team identified by the given `teamId`.
   */
  UpdateOrganizationTeam: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    /** @description Team update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTeamRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description UpdateOrganizationTeam 204 response */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete team
   * @description Deletes the team identified by the given `teamId`.
   */
  DeleteOrganizationTeam: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List team members
   * @description Lists the team members associated with the given `teamId`.
   */
  ListOrganizationTeamMembers: {
    parameters: {
      query?: {
        max?: number | null;
        offset?: number | null;
        search?: string | null;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMembersResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create team member
   * @description Adds a new member to the team identified by the given `teamId`.
   */
  CreateOrganizationTeamMember: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    /** @description Team create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTeamMemberRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AddTeamMemberResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete team member
   * @description Deletes the team member identified by the given `memberId`.
   */
  DeleteOrganizationTeamMember: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
        /** @description Member numeric identifier */
        memberId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List team workspaces
   * @description Lists all the workspaces of which the given `teamId` is a participant.
   */
  ListWorkspacesByTeam: {
    parameters: {
      query?: {
        /** @description Pagination max results */
        max?: number;
        /** @description Paginantion offset */
        offset?: number;
        /** @description Search criteria */
        search?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Team numeric identifier */
        teamId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListWorkspacesResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List organization workspaces
   * @description Lists the organization workspaces in `orgId` to which the requesting user belongs.
   */
  ListWorkspaces: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListWorkspacesResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create workspace
   * @description Creates a new organization workspace.
   */
  CreateWorkspace: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    /** @description Workspace create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkspaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateWorkspaceResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Validate workspace name
   * @description Confirms the validity of the given workspace name. Append `?name=<your_workspace_name>`.
   */
  WorkspaceValidate: {
    parameters: {
      query?: {
        /** @description Name to validate */
        name?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe workspace
   * @description Retrieves the details of the workspace identified by the given `workspaceId`.
   */
  DescribeWorkspace: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeWorkspaceResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update workspace
   * @description Updates the details of the workspace identified by the given `workspaceId`.
   */
  UpdateWorkspace: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    /** @description Workspace update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkspaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeWorkspaceResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate name */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete workspace
   * @description Deletes the workspace identified by the given `workspaceId`.
   */
  DeleteWorkspace: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List workspace participants
   * @description Lists the participants of the workspace identified by the given `workspaceId`.
   */
  ListWorkspaceParticipants: {
    parameters: {
      query?: {
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
      };
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListParticipantsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Leave workspace
   * @description Removes the requesting user from the given workspace.
   */
  LeaveWorkspaceParticipant: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create workspace participant
   * @description Adds a new participant to the workspace identified by the given `workspaceId`.
   */
  CreateWorkspaceParticipant: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    /** @description Participant addition request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddParticipantRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AddParticipantResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete workspace participant
   * @description Deletes the given participant from the given workspace.
   */
  DeleteWorkspaceParticipant: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Participant numeric identifier */
        participantId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update participant role
   * @description Updates the role of the given participant in the given workspace.
   */
  UpdateWorkspaceParticipantRole: {
    parameters: {
      path: {
        /** @description Organization numeric identifier */
        orgId: number;
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Participant numeric identifier */
        participantId: number;
      };
    };
    /** @description Participant role update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateParticipantRoleRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List pipeline secrets
   * @description Lists all available pipeline secrets in a user context. Append `?workspaceId` to list secrets in a workspace context.
   */
  ListPipelineSecrets: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPipelineSecretsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create pipeline secret
   * @description Creates a new pipeline secret in the user context. Append `?workspaceId` to create the secret in a workspace context.
   */
  CreatePipelineSecret: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Pipeline secret create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePipelineSecretRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreatePipelineSecretResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Validate secret name
   * @description Confirms the validity of the given pipeline secret name in a user context. Append `?name=<your_secret_name>`. Append `?workspaceId` to validate the name in a workspace context.
   */
  ValidatePipelineSecretName: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Secret name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe pipeline secret
   * @description Retrieves the details of the pipeline secret identified by the given `secretId`.
   */
  DescribePipelineSecret: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Secret numeric identifier */
        secretId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribePipelineSecretResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update secret
   * @description Updates the pipeline secret identified by the given `secretId`.
   */
  UpdatePipelineSecret: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Secret numeric identifier */
        secretId: number;
      };
    };
    /** @description Secret update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePipelineSecretRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete secret
   * @description Deletes the pipeline secret identified by the given `secretId`.
   */
  DeletePipelineSecret: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Secret numeric identifier */
        secretId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List pipelines
   * @description Lists all available pipelines in a user context, enriched by `attributes`. Append `workspaceId` to list pipelines in a workspace context.
   */
  ListPipelines: {
    parameters: {
      query?: {
        /** @description Additional attribute values to include in the response (`labels`, `optimized` status, `computeEnv`). Returns an empty value (`labels: null`, etc.) if omitted. */
        attributes?: components["schemas"]["PipelineQueryAttribute"][];
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Pagination max results */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
        /** @description Filter visibility parameter */
        visibility?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPipelinesResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create pipeline
   * @description Creates a new pipeline in a user context. Append `?workspaceId` to create the pipeline in a workspace context.
   */
  CreatePipeline: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Pipeline creation request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePipelineRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreatePipelineResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe remote pipeline repository
   * @description Retrieves the details of a remote Nextflow pipeline Git repository. Append the repository name or full URL with `?name`.
   */
  DescribePipelineRepository: {
    parameters: {
      query?: {
        /** @description Pipeline repository name or URL */
        name?: string;
        /** @description Pipeline revision */
        revision?: string;
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribePipelineInfoResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Add labels to pipelines
   * @description Adds the given list of labels to the given pipelines. Existing labels are preserved.
   */
  AddLabelsToPipelines: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels add request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociatePipelineLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Replace pipeline labels
   * @description Applies the given list of labels to the given pipelines. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
   */
  ApplyLabelsToPipelines: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels apply request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociatePipelineLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Remove labels from pipelines
   * @description Removes the given list of labels from the given pipelines.
   */
  RemoveLabelsFromPipelines: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels remove request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociatePipelineLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List user pipeline repositories
   * @description Lists known Nextflow pipeline Git repositories, extracted from existing runs. Append `?workspaceId` to list repositories in a workspace context.
   */
  ListPipelineRepositories: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPipelineInfoResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Validate pipeline name
   * @description Confirms the validity of the given pipeline `name` in a user context. Append `?name=<your_pipeline_name>`. Append `?workspaceId` to validate the name in a workspace context.
   */
  ValidatePipelineName: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Organization numeric identifier */
        orgId?: number;
        /** @description Pipeline name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe pipeline
   * @description Retrieves the details of the pipeline identified by the given `pipelineId`, enriched by `attributes`.
   */
  DescribePipeline: {
    parameters: {
      query?: {
        /** @description Additional attribute values to include in the response (`labels`, `optimized` status, `computeEnv`). Returns an empty value (`labels: null`, etc.) if omitted. */
        attributes?: components["schemas"]["PipelineQueryAttribute"][];
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Source workspace numeric identifier */
        sourceWorkspaceId?: number | null;
      };
      path: {
        /** @description Pipeline numeric identifier */
        pipelineId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribePipelineResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update pipeline
   * @description Updates the details of the pipeline identified by the given `pipelineId`.
   *             **Note**: If `labelIds` is `null`, empty, or ommitted, existing pipeline labels are removed.
   *             Include `labelIds: [<label-id-1>,<label-id-2>]` to override existing labels. Labels to be preserved must be included.
   *             To append a list of labels to multiple pipelines, use `/pipelines/labels/add`.
   */
  UpdatePipeline: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Pipeline numeric identifier */
        pipelineId: number;
      };
    };
    /** @description Pipeline update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePipelineRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdatePipelineResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete pipeline
   * @description Deletes the pipeline identified by the given `pipelineId`.
   */
  DeletePipeline: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Pipeline numeric identifier */
        pipelineId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe pipeline launch
   * @description Retrieves the launch details of the pipeline identified by the given `pipelineId`.
   */
  DescribePipelineLaunch: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Source workspace numeric identifier */
        sourceWorkspaceId?: number | null;
      };
      path: {
        /** @description Pipeline numeric identifier */
        pipelineId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeLaunchResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe pipeline schema
   * @description Retrieves the pipeline schema of the pipeline identified by the given `pipelineId`, enriched by `attributes`.
   */
  DescribePipelineSchema: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Source workspace numeric identifier */
        sourceWorkspaceId?: number | null;
        /** @description Attribute values to include in the response: `schema` returns the pipeline schema, `params` returns the pipeline config. Returns all if `attributes` is omitted. */
        attributes?: components["schemas"]["PipelineSchemaAttributes"][];
      };
      path: {
        /** @description Pipeline numeric identifier */
        pipelineId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PipelineSchemaResponse"];
        };
      };
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List platforms
   * @description Lists all available computing platforms in a user context. Append `?workspaceId` to list platforms in a workspace context.
   */
  ListPlatforms: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        orgId?: string | null;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPlatformsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe platform
   * @description Retrieves the details of the computing platform identified by the given `platformId`.
   */
  DescribePlatform: {
    parameters: {
      query: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        regionId: string;
        credentialsId: string;
      };
      path: {
        /** @description Platform string identifier */
        platformId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribePlatformResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List platform regions
   * @description Lists the available regions for the computing platform identified by the given `platformId`.
   */
  ListPlatformRegions: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Platform string identifier */
        platformId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListRegionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** General Tower service features and version */
  Info: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceInfoResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List all available API tokens */
  TokenList: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListAccessTokensResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Create an API token */
  CreateToken: {
    /** @description Access token create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccessTokenRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAccessTokenResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete all user API tokens */
  DeleteAllTokens: {
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Delete an API token */
  DeleteToken: {
    parameters: {
      path: {
        /** @description Token numeric identifier */
        tokenId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Create a new Workflow execution trace */
  CreateTrace: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Trace create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TraceCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TraceCreateResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Signal the Workflow execution has started */
  UpdateTraceBegin: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    /** @description Trace begin request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TraceBeginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TraceBeginResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Signal the Workflow execution has completed */
  UpdateTraceComplete: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    /** @description Trace complete request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TraceCompleteRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TraceCompleteResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Period request to signal the execution is still on-going */
  UpdateTraceHeartbeat: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    /** @description Trace heartbeat request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TraceHeartbeatRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TraceHeartbeatResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Store one or more task executions metadata for the specified Workflow */
  UpdateTraceProgress: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    /** @description Trace progress request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TraceProgressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TraceProgressResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Describe current user */
  UserInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeUserResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List user workspaces and organizations
   * @description Lists the workspaces and organizations to which the user identified by the given `userId` belongs.
   */
  ListWorkspacesUser: {
    parameters: {
      path: {
        /** @description User numeric identifier */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListWorkspacesAndOrgResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Check that the user name is valid */
  ValidateUserName: {
    parameters: {
      query?: {
        /** @description User name to validate */
        name?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Describe a user entity */
  DescribeUser: {
    parameters: {
      path: {
        /** @description User numeric identifier */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeUserResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Update an user entity */
  UpdateUser: {
    parameters: {
      path: {
        /** @description User numeric identifier */
        userId: number;
      };
    };
    /** @description User update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDbDto"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Delete a user entity */
  DeleteUser: {
    parameters: {
      path: {
        /** @description User numeric identifier */
        userId: number;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List workflows
   * @description Lists all workflow records, enriched with `attributes`. Append `?workspaceId` to list workflow records in a workspace context.
   */
  ListWorkflows: {
    parameters: {
      query?: {
        /** @description Additional attribute values to include in the response (`labels`, `optimized` status). Returns an empty value (`labels: null`) if omitted. Specify `minimal` to remove non-essential fields (for use in UI only). */
        attributes?: components["schemas"]["WorkflowQueryAttribute"][];
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Filter search parameter */
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListWorkflowsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete workflows
   * @description Deletes the workflow records identified by the given list of `workflowIds`.
   */
  DeleteWorkflowMany: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Force the deletion even if any workflows are active */
        force?: boolean;
      };
    };
    /** @description Delete workflows request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteWorkflowsRequest"];
      };
    };
    responses: {
      /** @description OK - Return the IDs of workflows that could not be deleted, if any */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteWorkflowsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Add labels to workflows
   * @description Adds the given list of labels to the given workflows. Existing labels are preserved.
   */
  AddLabelsToWorkflows: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels add request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateWorkflowLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Replace workflow labels
   * @description Applies the given list of labels to the given workflows. Existing labels are replaced â€” include labels to be preserved in `labelIds`.
   */
  ApplyLabelsToWorkflows: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels apply request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateWorkflowLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Remove labels from workflows
   * @description Removes the given list of labels from the given workflows.
   */
  RemoveLabelsFromWorkflows: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
    };
    /** @description Labels remove request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssociateWorkflowLabelsRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Launch workflow
   * @description Submits a workflow execution.
   */
  CreateWorkflowLaunch: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Source workspace numeric identifier */
        sourceWorkspaceId?: number | null;
      };
    };
    /** @description Workflow launch request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitWorkflowLaunchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SubmitWorkflowLaunchResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Generates a random name */
  GenerateRandomWorkflowName: {
    responses: {
      /** @description Generated name */
      200: {
        content: {
          "application/json": components["schemas"]["RandomWorkflowNameResponse"];
        };
      };
    };
  };
  /** Check that the given run name of a workflow has a valid format. When the session ID is given: check that no other workflow in the system exists with the combination of both elements */
  ValidateWorkflowConstraints: {
    parameters: {
      query?: {
        /** @description Workflow run name to validate */
        runName?: string;
        /** @description Workflow session ID to validate */
        sessionId?: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request. Invalid run name format */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Duplicated element. Existing run name and session ID combination */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Describe workflow
   * @description Retrieves the details of the workflow record associated with the given `workflowId`.
   */
  DescribeWorkflow: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Comma-separated list of attributes to retrieve. Returns an empty value for each attribute not specified. */
        attributes?: components["schemas"]["WorkflowQueryAttribute"][];
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeWorkflowResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Delete the Workflow entity with the given ID */
  DeleteWorkflow: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Force the deletion even if the workflow is active */
        force?: boolean;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK - Not content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Cancel workflow
   * @description Cancels the workflow execution identified by the given `workflowId`.
   */
  CancelWorkflow: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EmptyBodyRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Download workflow files
   * @description Downloads the workflow files for the Nextflow main job associated with the given `workflowId`.
   */
  DownloadWorkflowLog: {
    parameters: {
      query?: {
        /** @description Filename to download */
        fileName?: string;
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Download workflow task files
   * @description Downloads the workflow files of the task identified by the given `taskId`.
   */
  DownloadWorkflowTaskLog: {
    parameters: {
      query?: {
        /** @description Filename to download */
        fileName?: string;
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
        /** @description Task numeric identifier */
        taskId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe workflow launch
   * @description Retrieves the details of the workflow launch associated with the given `workflowId`.
   */
  DescribeWorkflowLaunch: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeWorkflowLaunchResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element. Existing run name and session ID combination */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get workflow logs
   * @description Retrieves the output logs for the Nextflow main job of the workflow identified by the given `workflowId`.
   */
  WorkflowLogs: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Workflow log cursor */
        next?: string;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowLogResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get workflow task logs
   * @description Retrieves the output logs for the workflow task identified by the given `taskId`.
   */
  GetWorkflowTaskLog: {
    parameters: {
      query?: {
        /** @description Workflow log cursor */
        next?: string;
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
        /** @description Task numeric identifier */
        taskId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowLogResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Get the execution metrics for the given Workflow ID */
  DescribeWorkflowMetrics: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetWorkflowMetricsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** Retrieve the execution progress for the given Workflow ID */
  DescribeWorkflowProgress: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetProgressResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Check workflow star status
   * @description Confirms whether the given `workflowId` is starred.
   */
  DescribeWorkflowStar: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateWorkflowStarResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Star workflow
   * @description Adds the workflow identified by the given `workflowId` to your list of starred workflows.
   */
  CreateWorkflowStar: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateWorkflowStarResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Duplicated element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Unstar workflow
   * @description Removes the workflow identified by the given `workflowId` from your list of starred workflows.
   */
  DeleteWorkflowStar: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateWorkflowStarResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Describe a task entity with the given ID */
  DescribeWorkflowTask: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
        /** @description Task numeric identifier */
        taskId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeTaskResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /** List the tasks for the given Workflow ID and filter parameters */
  ListWorkflowTasks: {
    parameters: {
      query?: {
        /** @description Workspace numeric identifier */
        workspaceId?: number;
        /** @description Pagination result max result */
        max?: number;
        /** @description Pagination offset */
        offset?: number;
        /** @description Field to sort by */
        sortBy?: string;
        /** @description Sorting direction (asc|desc) */
        sortDir?: string;
        /** @description Search tasks by name */
        search?: string;
      };
      path: {
        /** @description Workflow string identifier */
        workflowId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTasksResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * List available datasets
   * @deprecated
   * @description Lists all available datasets in the workspace context identified by the given `workspaceId`.
   */
  ListDatasets_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create dataset
   * @deprecated
   * @description Creates a new Tower dataset in the given workspace context. Include the dataset file and details in your request body.
   */
  CreateDataset_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    /** @description Dataset create request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDatasetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDatasetResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List latest dataset versions
   * @deprecated
   * @description Lists the latest version of each dataset associated with the given `workspaceId`.
   */
  ListWorkspaceDatasetVersions_1: {
    parameters: {
      query?: {
        mimeType?: string | null;
      };
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetVersionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update dataset
   * @deprecated
   * @description Updates the details of the dataset identified by the given `datasetId`.
   */
  UpdateDataset_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    /** @description Dataset update request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDatasetRequest"];
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Duplicate element */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete dataset
   * @deprecated
   * @description Deletes the dataset identified by the given `datasetId`.
   */
  DeleteDataset_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK - No content */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Describe dataset
   * @deprecated
   * @description Retrieves the metadata of the dataset identified by the given `datasetId`.
   */
  DescribeDataset_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DescribeDatasetResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Upload new dataset version
   * @deprecated
   * @description Uploads the CSV or TSV content to create a new version of the dataset identified by the given `datasetId`.
   */
  UploadDataset_1: {
    parameters: {
      query?: {
        /** @description Uploaded file has header */
        header?: boolean;
      };
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    /** @description Dataset file request */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["MultiRequestFileSchema"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadDatasetVersionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
  /**
   * Download dataset content
   * @description Downloads the content of the dataset identified by the given `datasetId` and `version`.
   */
  DownloadDataset_1: {
    parameters: {
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
        /** @description Version number to download */
        version: string;
        /** @description File name for the downloaded dataset content */
        fileName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List all dataset versions
   * @deprecated
   * @description Lists all versions of the given `datasetId`.
   */
  ListDatasetVersions_1: {
    parameters: {
      query?: {
        /** @description Optional MIME type filter */
        mimeType?: string;
      };
      path: {
        /** @description Workspace numeric identifier */
        workspaceId: number;
        /** @description Dataset string identifier */
        datasetId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDatasetVersionsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Operation not allowed */
      403: {
        content: never;
      };
    };
  };
}
